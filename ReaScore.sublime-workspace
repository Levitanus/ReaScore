{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Scale",
				"Scale"
			],
			[
				"ACCI",
				"ACCIDENTALS"
			],
			[
				"show",
				"show_message_box"
			],
			[
				"temp",
				"temp_pdf"
			],
			[
				"get_op",
				"get_open_command"
			],
			[
				"pop",
				"Popen"
			],
			[
				"sub",
				"subprocess."
			],
			[
				"tem",
				"temp_pdf"
			],
			[
				"Pro",
				"ProjectInspector"
			],
			[
				"trun",
				"truncate"
			],
			[
				"copy",
				"copyfile"
			],
			[
				"Po",
				"Popen"
			],
			[
				"picked",
				"picked=True"
			],
			[
				"EXT_SET",
				"EXT_SECTION"
			],
			[
				"set_ext",
				"set_ext_state"
			],
			[
				"po",
				"project"
			],
			[
				"sl",
				"sleep"
			],
			[
				"time",
				"time"
			],
			[
				"exi",
				"exists"
			],
			[
				"jo",
				"joinpath"
			],
			[
				"par",
				"parent"
			],
			[
				"is",
				"is_dir"
			],
			[
				"pro",
				"project"
			],
			[
				"Opti",
				"Optional"
			],
			[
				"Runti",
				"RuntimeError"
			],
			[
				"part",
				"part_name"
			],
			[
				"Path",
				"Path"
			],
			[
				"set_",
				"set_ext_state"
			],
			[
				"not",
				"not provided"
			],
			[
				"split",
				"split_by_voice"
			],
			[
				"render_staf",
				"render_staff"
			],
			[
				"split_by_",
				"split_by_voice"
			],
			[
				"from",
				"from_GUID"
			],
			[
				"active_ta",
				"active_take"
			],
			[
				"selected",
				"selected_tracks"
			],
			[
				"gui",
				"GUID"
			],
			[
				"guid",
				"getuid"
			],
			[
				"toni",
				"tonic_selected"
			],
			[
				"tonic",
				"tonic_selected"
			],
			[
				"Selec",
				"Selectable"
			],
			[
				"Treep",
				"TreePop"
			],
			[
				"Sele",
				"Selectable"
			],
			[
				"BeginC",
				"BeginCombo"
			],
			[
				"Tree",
				"TreeNode"
			],
			[
				"Img",
				"ImGui"
			],
			[
				"Bu",
				"Button"
			],
			[
				"ite",
				"item_nr"
			],
			[
				"main",
				"main_ctx,"
			],
			[
				"Co",
				"Combo"
			],
			[
				"Tre",
				"TreePop"
			],
			[
				"Colla",
				"CollapsingHeader"
			],
			[
				"def",
				"defer(loop)"
			],
			[
				"Des",
				"DestroyContext"
			],
			[
				"open",
				"opened:"
			],
			[
				"Im",
				"ImGui"
			],
			[
				"Be",
				"Begin"
			],
			[
				"mainId",
				"main_id"
			],
			[
				"Crea",
				"CreateContext"
			],
			[
				"genera",
				"generate_imgui"
			],
			[
				"click",
				"click_count"
			],
			[
				"version",
				"get_reaper_version"
			],
			[
				"Att",
				"AttachFont"
			],
			[
				"Pus",
				"PushFont"
			],
			[
				"Font",
				"CreateFont"
			],
			[
				"tonic_",
				"tonic_for_ly"
			],
			[
				"va",
				"value"
			],
			[
				"ren",
				"ly_render"
			],
			[
				"midi",
				"midi_pitch"
			],
			[
				"bar",
				"bar_nr == self.bar_nr:"
			],
			[
				"round",
				"round"
			],
			[
				"barchek",
				"barchek"
			],
			[
				"ba",
				"bar_nr"
			],
			[
				"Opt",
				"Optional"
			],
			[
				"prea",
				"preambula"
			],
			[
				"ly",
				"ly_render"
			],
			[
				"render_pream",
				"render_preambula(event),"
			],
			[
				"Bar",
				"BarChek"
			],
			[
				"pre",
				"preambula"
			],
			[
				"Not",
				"NotImplemented"
			],
			[
				"mea",
				"beats_to_measures"
			],
			[
				"Frac",
				"FracError(str(e))"
			],
			[
				"Bas",
				"BaseException"
			],
			[
				"Value",
				"ValueError(\""
			],
			[
				"insi",
				"inside_reaper()"
			],
			[
				"any_to_ly",
				"any_to_lily"
			],
			[
				"lily",
				"lily_string"
			],
			[
				"fu",
				"full_bar"
			],
			[
				"lily_str",
				"lily_string"
			],
			[
				"iden",
				"ident_am"
			],
			[
				"initi",
				"initial_indent="
			],
			[
				"subse",
				"subsequent_indent="
			],
			[
				"wra",
				"wrap"
			],
			[
				"ide",
				"idents"
			],
			[
				"spl",
				"split"
			],
			[
				"chec",
				"check_output"
			],
			[
				"writele",
				"writelines"
			],
			[
				"ope",
				"open(ly, 'r')"
			],
			[
				"with",
				"with_suffix"
			],
			[
				"de",
				"decode"
			],
			[
				"Run",
				"RuntimeError('Lily"
			],
			[
				"nam",
				"named_pitch"
			],
			[
				"Eve",
				"Event"
			],
			[
				"rendered",
				"rendered_voices"
			],
			[
				"render",
				"rendered_voices"
			],
			[
				"act",
				"active_take"
			],
			[
				"selec",
				"selected_items"
			],
			[
				"any",
				"any_to_lily"
			],
			[
				"nota",
				"notations"
			],
			[
				"pit",
				"pitches="
			],
			[
				"nume",
				"numerator"
			],
			[
				"deno",
				"denominator"
			],
			[
				"denom",
				"denominator"
			],
			[
				"denominat",
				"denominator"
			],
			[
				"num",
				"numerator"
			],
			[
				"reve",
				"reversed"
			],
			[
				"norma",
				"normalize():"
			],
			[
				"no",
				"normalized"
			],
			[
				"Mat",
				"Match"
			],
			[
				"mat",
				"match"
			],
			[
				"na",
				"named_pitch"
			],
			[
				"Sc",
				"Scale"
			],
			[
				"app",
				"append"
			],
			[
				"Op",
				"Optional"
			],
			[
				"abja",
				"abjad.Staff"
			],
			[
				"lan",
				"language="
			],
			[
				"Type",
				"TypeError(\""
			],
			[
				"event",
				"events_from_take"
			],
			[
				"spli_",
				"split_by_voice"
			]
		]
	},
	"buffers":
	[
		{
			"file": "rea_score/reascripts/ReaScore_render_selected_track.py",
			"settings":
			{
				"buffer_size": 209,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "rea_score."
					},
					"CgAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAABNAAAAAAAAAE4AAAAAAAAAAAAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAHgEAAAAAAAAeAQAAcHJpbnQoInRvcCBvZiBtb2R1bGUiKQppbXBvcnQgcmVhcHkgYXMgcnByCgpwcmludCgicmVhcHkgaW1wb3J0ZWQiKQppbXBvcnQgcmVhX3Njb3JlLmluc3BlY3RvciBhcyBpdAoKcHJpbnQoImluc3BlY3RvciBpbXBvcnRlZCIpCgoKZGVmIHJlbmRlcl9zZWxlY3RlZF90cmFjaygpIC0+IE5vbmU6CiAgICB0cmFjayA9IHJwci5Qcm9qZWN0KCkuc2VsZWN0ZWRfdHJhY2tzWzBdCiAgICBpdC5UcmFja0luc3BlY3RvcigpLnJlbmRlcigpCgoKcmVuZGVyX3NlbGVjdGVkX3RyYWNrKCkKcHJpbnQoImVuZCIpCg",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAHgEAAAAAAAAeAQAAcHJpbnQoInRvcCBvZiBtb2R1bGUiKQppbXBvcnQgcmVhcHkgYXMgcnByCgpwcmludCgicmVhcHkgaW1wb3J0ZWQiKQppbXBvcnQgcmVhX3Njb3JlLmluc3BlY3RvciBhcyBpdAoKcHJpbnQoImluc3BlY3RvciBpbXBvcnRlZCIpCgoKZGVmIHJlbmRlcl9zZWxlY3RlZF90cmFjaygpIC0+IE5vbmU6CiAgICB0cmFjayA9IHJwci5Qcm9qZWN0KCkuc2VsZWN0ZWRfdHJhY2tzWzBdCiAgICBpdC5UcmFja0luc3BlY3RvcigpLnJlbmRlcigpCgoKcmVuZGVyX3NlbGVjdGVkX3RyYWNrKCkKcHJpbnQoImVuZCIpCg",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAHgEAAAAAAAAeAQAAcHJpbnQoInRvcCBvZiBtb2R1bGUiKQppbXBvcnQgcmVhcHkgYXMgcnByCgpwcmludCgicmVhcHkgaW1wb3J0ZWQiKQppbXBvcnQgcmVhX3Njb3JlLmluc3BlY3RvciBhcyBpdAoKcHJpbnQoImluc3BlY3RvciBpbXBvcnRlZCIpCgoKZGVmIHJlbmRlcl9zZWxlY3RlZF90cmFjaygpIC0+IE5vbmU6CiAgICB0cmFjayA9IHJwci5Qcm9qZWN0KCkuc2VsZWN0ZWRfdHJhY2tzWzBdCiAgICBpdC5UcmFja0luc3BlY3RvcigpLnJlbmRlcigpCgoKcmVuZGVyX3NlbGVjdGVkX3RyYWNrKCkKcHJpbnQoImVuZCIpCg",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					3,
					"left_delete",
					null,
					"BwAAAGYAAAAAAAAAZgAAAAAAAAAbAAAAcHJpbnQoImluc3BlY3RvciBpbXBvcnRlZCIpLAAAAAAAAAAsAAAAAAAAABcAAABwcmludCgicmVhcHkgaW1wb3J0ZWQiKQAAAAAAAAAAAAAAAAAAAAAWAAAAcHJpbnQoInRvcCBvZiBtb2R1bGUiKTgAAAAAAAAAOAAAAAAAAAABAAAAChUAAAAAAAAAFQAAAAAAAAABAAAACjYAAAAAAAAANgAAAAAAAAABAAAAChQAAAAAAAAAFAAAAAAAAAABAAAACg",
					"AQAAAAAAAAADAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwAAAAAAAAAsAAAAAAAAAAAAAAAAAAAAgQAAAAAAAABmAAAAAAAAAAAAAAAAAAAA"
				],
				[
					79,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAA0QAAAAAAAADSAAAACmltcG9ydCByZWFweSBhcyBycHIKaW1wb3J0IHJlYV9zY29yZS5pbnNwZWN0b3IgYXMgaXQKCgpkZWYgcmVuZGVyX3NlbGVjdGVkX3RyYWNrKCkgLT4gTm9uZToKICAgIHRyYWNrID0gcnByLlByb2plY3QoKS5zZWxlY3RlZF90cmFja3NbMF0KICAgIGl0LlRyYWNrSW5zcGVjdG9yKCkucmVuZGVyKCkKCgpyZW5kZXJfc2VsZWN0ZWRfdHJhY2soKQpwcmludCgiZW5kIikK",
					"AQAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/FAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/NQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "rea_score/scale.py",
			"settings":
			{
				"buffer_size": 2835,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAagoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAagoAAAAAAAASCwAAY2xhc3MgQWNjaWRlbnRhbChFbnVtKToKICAgIGlzXyA9IGF1dG8oKQogICAgaXNpcyA9IGF1dG8oKQogICAgZXMgPSBhdXRvKCkKICAgIGVzZXMgPSBhdXRvKCkKICAgIHdoaXRlID0gYXV0bygpCgoKX2FjY2lkZW50YWxzID0gewogICAgMDogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdDJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Lima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Tima3ima0nCiAgICB9LAogICAgMTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdEJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdD4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdF4pmt4pmtJwogICAgfSwKICAgIDM6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Tima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdF4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdG4pmt4pmtJywKICAgIH0sCiAgICA0OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDU6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRicsCiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdF4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdH4pmt4pmtJwogICAgfSwKICAgIDY6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0bima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Xima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdH4pmtJywKICAgIH0sCiAgICA3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnR+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Hima0nCiAgICB9LAogICAgOTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdBJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdH4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdC4pmt4pmtJwogICAgfSwKICAgIDEwOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdB4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQuKZrScsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQ+KZreKZrScKICAgIH0sCiAgICAxMTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdCJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdB4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQ+KZrScKICAgIH0sCiAgICAxMjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdDJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Lima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Tima3ima0nCiAgICB9LAogICAgMTM6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Pima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Lima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdE4pmtJwogICAgfSwKICAgIDE0OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMTU6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Tima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdF4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdG4pmt4pmtJywKICAgIH0sCiAgICAxNjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdFJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdE4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnRuKZrScKICAgIH0sCiAgICAxNzogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgMTg6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0bima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Xima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdH4pmtJywKICAgIH0sCiAgICAxOTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdHJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdG4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdB4pmt4pmtJwogICAgfSwKICAgIDIwOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICAyMTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdBJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdH4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdC4pmt4pmtJwogICAgfSwKICAgIDIyOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdB4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQuKZrScsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQ+KZreKZrScKICAgIH0sCiAgICAyMzogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdCJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdB4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQ+KZrScKICAgIH0sCn0",
					"AQAAAAAAAAABAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAHIAAAAAAAAAcgAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "ACCIDENTA"
					},
					"CgAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAABzAAAAAAAAAAsAAABhY2NpZGVudGFsc3MAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAB1AAAAAAAAAHYAAAAAAAAAAAAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHkAAAAAAAAAAAAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "LS"
					},
					"AgAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAaQoAAAAAAAARCwAAY2xhc3MgQWNjaWRlbnRhbChFbnVtKToKICAgIGlzXyA9IGF1dG8oKQogICAgaXNpcyA9IGF1dG8oKQogICAgZXMgPSBhdXRvKCkKICAgIGVzZXMgPSBhdXRvKCkKICAgIHdoaXRlID0gYXV0bygpCgoKQUNDSURFTlRBTFMgPSB7CiAgICAwOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdD4pmvJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdC4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnROKZrScKICAgIH0sCiAgICAyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRScsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnROKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0bima0nCiAgICB9LAogICAgNTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgNjogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDc6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnRuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQeKZreKZrScKICAgIH0sCiAgICA4OiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICA5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMTA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDExOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKICAgIDEyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMTQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRCcsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQ+KZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnReKZreKZrScKICAgIH0sCiAgICAxNTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDE2OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDE3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0YnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnReKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnR+KZreKZrScKICAgIH0sCiAgICAxODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDE5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgMjA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0fima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdB4pmtJwogICAgfSwKICAgIDIxOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMjI6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDIzOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKfQ",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-pyright\",\"item\":{\"kind\":7,\"textEdit\":{\"newText\":\"Enum\",\"range\":{\"end\":{\"line\":0,\"character\":21},\"start\":{\"line\":0,\"character\":17}}},\"label\":\"Enum\",\"detail\":\"Auto-import\",\"sortText\":\"12.9999.Enum\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"```\\nfrom enum import Enum\\n```\"},\"data\":{\"filePath\":\"/home/levitanus/gits/ReaScore/rea_score/scale.py\",\"position\":{\"line\":0,\"character\":21},\"symbolLabel\":\"Enum\",\"autoImportText\":\"```\\nfrom enum import Enum\\n```\",\"workspacePath\":\"/home/levitanus/gits/ReaScore\"}}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							14,
							21,
							0
						],
						"trigger": "Enum"
					},
					"AgAAABEAAAAAAAAAEQAAAAAAAAAEAAAARW51bREAAAAAAAAAFQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"from enum import Enum\n\n\n",
								null
							]
						]
					},
					"AQAAAAAAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-pyright\",\"item\":{\"kind\":7,\"textEdit\":{\"newText\":\"auto\",\"range\":{\"end\":{\"line\":4,\"character\":14},\"start\":{\"line\":4,\"character\":10}}},\"label\":\"auto\",\"detail\":\"Auto-import\",\"sortText\":\"12.9999.auto\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"```\\nfrom enum import auto\\n```\"},\"data\":{\"filePath\":\"/home/levitanus/gits/ReaScore/rea_score/scale.py\",\"position\":{\"line\":4,\"character\":14},\"symbolLabel\":\"auto\",\"autoImportText\":\"```\\nfrom enum import auto\\n```\",\"workspacePath\":\"/home/levitanus/gits/ReaScore\"}}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							20,
							27,
							0
						],
						"trigger": "auto"
					},
					"AgAAADoAAAAAAAAAOgAAAAAAAAAEAAAAYXV0bzoAAAAAAAAAPgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									0,
									21
								],
								[
									0,
									21
								],
								", auto",
								null
							]
						]
					},
					"AQAAABUAAAAAAAAAGwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAhwoAAAAAAAAvCwAAZnJvbSBlbnVtIGltcG9ydCBFbnVtLCBhdXRvCgoKY2xhc3MgQWNjaWRlbnRhbChFbnVtKToKICAgIGlzXyA9IGF1dG8oKQogICAgaXNpcyA9IGF1dG8oKQogICAgZXMgPSBhdXRvKCkKICAgIGVzZXMgPSBhdXRvKCkKICAgIHdoaXRlID0gYXV0bygpCgoKQUNDSURFTlRBTFMgPSB7CiAgICAwOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdD4pmvJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdC4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnROKZrScKICAgIH0sCiAgICAyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRScsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnROKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0bima0nCiAgICB9LAogICAgNTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgNjogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDc6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnRuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQeKZreKZrScKICAgIH0sCiAgICA4OiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICA5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMTA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDExOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKICAgIDEyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMTQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRCcsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQ+KZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnReKZreKZrScKICAgIH0sCiAgICAxNTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDE2OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDE3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0YnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnReKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnR+KZreKZrScKICAgIH0sCiAgICAxODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDE5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgMjA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0fima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdB4pmtJwogICAgfSwKICAgIDIxOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMjI6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDIzOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKfQ",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIcKAAAAAAAAiAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwoAAAAAAACHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAiAoAAAAAAAAwCwAAZnJvbSBlbnVtIGltcG9ydCBFbnVtLCBhdXRvCgoKY2xhc3MgQWNjaWRlbnRhbChFbnVtKToKICAgIGlzXyA9IGF1dG8oKQogICAgaXNpcyA9IGF1dG8oKQogICAgZXMgPSBhdXRvKCkKICAgIGVzZXMgPSBhdXRvKCkKICAgIHdoaXRlID0gYXV0bygpCgoKQUNDSURFTlRBTFMgPSB7CiAgICAwOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdD4pmvJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdC4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnROKZrScKICAgIH0sCiAgICAyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRScsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnROKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0bima0nCiAgICB9LAogICAgNTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgNjogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDc6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnRuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQeKZreKZrScKICAgIH0sCiAgICA4OiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICA5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMTA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDExOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKICAgIDEyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMTQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRCcsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQ+KZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnReKZreKZrScKICAgIH0sCiAgICAxNTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDE2OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDE3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0YnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnReKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnR+KZreKZrScKICAgIH0sCiAgICAxODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDE5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgMjA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0fima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdB4pmtJwogICAgfSwKICAgIDIxOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMjI6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDIzOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKfQo",
					"AQAAAAAAAAABAAAAiAoAAAAAAACICgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAwCwAAZnJvbSBlbnVtIGltcG9ydCBFbnVtLCBhdXRvCgoKY2xhc3MgQWNjaWRlbnRhbChFbnVtKToKICAgIGlzXyA9IGF1dG8oKQogICAgaXNpcyA9IGF1dG8oKQogICAgZXMgPSBhdXRvKCkKICAgIGVzZXMgPSBhdXRvKCkKICAgIHdoaXRlID0gYXV0bygpCgoKQUNDSURFTlRBTFMgPSB7CiAgICAwOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdD4pmvJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdC4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnROKZrScKICAgIH0sCiAgICAyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRScsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnROKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0bima0nCiAgICB9LAogICAgNTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgNjogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDc6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnRuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQeKZreKZrScKICAgIH0sCiAgICA4OiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICA5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMTA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDExOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKICAgIDEyOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0MnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnROKZreKZrScKICAgIH0sCiAgICAxMzogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMTQ6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRCcsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQ+KZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnReKZreKZrScKICAgIH0sCiAgICAxNTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnROKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Xima0nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0bima3ima0nLAogICAgfSwKICAgIDE2OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDE3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0YnLAogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnReKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnR+KZreKZrScKICAgIH0sCiAgICAxODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnRuKZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnReKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0fima0nLAogICAgfSwKICAgIDE5OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgMjA6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0fima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdB4pmtJwogICAgfSwKICAgIDIxOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0EnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0fima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Lima3ima0nCiAgICB9LAogICAgMjI6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Hima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdC4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdD4pmt4pmtJwogICAgfSwKICAgIDIzOiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0InLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Hima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdD4pmtJwogICAgfSwKfQoAAAAAAAAAAIcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAABwAAAAAAAAApQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAEwsAAAAAAAC4CwAAZnJvbSBlbnVtIGltcG9ydCBFbnVtLCBhdXRvCmNsYXNzIFNjYWxlKEVudW0pOgogICAgbWFqb3IgPSAnbWFqb3InCiAgICBtaW5vciA9ICdtaW5vcicKCiAgICBAcHJvcGVydHkKICAgIGRlZiBmb3JfbGlicm9zYShzZWxmKSAtPiBzdHI6CiAgICAgICAgcmV0dXJuIHNlbGYudmFsdWVbOjNdCgpjbGFzcyBBY2NpZGVudGFsKEVudW0pOgogICAgaXNfID0gYXV0bygpCiAgICBpc2lzID0gYXV0bygpCiAgICBlcyA9IGF1dG8oKQogICAgZXNlcyA9IGF1dG8oKQogICAgd2hpdGUgPSBhdXRvKCkKCgpFTkhBUk1fQUNDID0gewogICAgMDogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdDJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Lima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Tima3ima0nCiAgICB9LAogICAgMTogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnQ+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5pc2lzOiAnQuKZr+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Tima0nCiAgICB9LAogICAgMjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdEJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdD4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdF4pmt4pmtJwogICAgfSwKICAgIDM6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Tima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdF4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdG4pmt4pmtJywKICAgIH0sCiAgICA0OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0UnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Tima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdG4pmtJwogICAgfSwKICAgIDU6IHsKICAgICAgICBBY2NpZGVudGFsLndoaXRlOiAnRicsCiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdF4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdH4pmt4pmtJwogICAgfSwKICAgIDY6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0bima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Xima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdH4pmtJywKICAgIH0sCiAgICA3OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0cnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0bima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Hima3ima0nCiAgICB9LAogICAgODogewogICAgICAgIEFjY2lkZW50YWwuaXNfOiAnR+KZrycsCiAgICAgICAgQWNjaWRlbnRhbC5lczogJ0Hima0nCiAgICB9LAogICAgOTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdBJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdH4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdC4pmt4pmtJwogICAgfSwKICAgIDEwOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdB4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQuKZrScsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQ+KZreKZrScKICAgIH0sCiAgICAxMTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdCJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdB4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQ+KZrScKICAgIH0sCiAgICAxMjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdDJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Lima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Tima3ima0nCiAgICB9LAogICAgMTM6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Pima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Lima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdE4pmtJwogICAgfSwKICAgIDE0OiB7CiAgICAgICAgQWNjaWRlbnRhbC53aGl0ZTogJ0QnLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Pima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0Xima3ima0nCiAgICB9LAogICAgMTU6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Tima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdF4pmtJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdG4pmt4pmtJywKICAgIH0sCiAgICAxNjogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdFJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdE4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnRuKZrScKICAgIH0sCiAgICAxNzogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdGJywKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0Xima8nLAogICAgICAgIEFjY2lkZW50YWwuZXNlczogJ0fima3ima0nCiAgICB9LAogICAgMTg6IHsKICAgICAgICBBY2NpZGVudGFsLmlzXzogJ0bima8nLAogICAgICAgIEFjY2lkZW50YWwuaXNpczogJ0Xima/ima8nLAogICAgICAgIEFjY2lkZW50YWwuZXM6ICdH4pmtJywKICAgIH0sCiAgICAxOTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdHJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdG4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdB4pmt4pmtJwogICAgfSwKICAgIDIwOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdH4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQeKZrScKICAgIH0sCiAgICAyMTogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdBJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdH4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzZXM6ICdC4pmt4pmtJwogICAgfSwKICAgIDIyOiB7CiAgICAgICAgQWNjaWRlbnRhbC5pc186ICdB4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQuKZrScsCiAgICAgICAgQWNjaWRlbnRhbC5lc2VzOiAnQ+KZreKZrScKICAgIH0sCiAgICAyMzogewogICAgICAgIEFjY2lkZW50YWwud2hpdGU6ICdCJywKICAgICAgICBBY2NpZGVudGFsLmlzaXM6ICdB4pmv4pmvJywKICAgICAgICBBY2NpZGVudGFsLmVzOiAnQ+KZrScKICAgIH0sCn0K",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/inspector.py",
			"settings":
			{
				"buffer_size": 3770,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "..."
					},
					"BAAAAMgNAAAAAAAAyQ0AAAAAAAAAAAAAyQ0AAAAAAADJDQAAAAAAAA4AAAB0aW1lLnNsZWVwKC41KckNAAAAAAAAyg0AAAAAAAAAAAAAyg0AAAAAAADLDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1g0AAAAAAADIDQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAtg4AAAAAAAC2DgAAZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmltcG9ydCB0aW1lCmZyb20gc2h1dGlsIGltcG9ydCBjb3B5ZmlsZQoKaW1wb3J0IHJlYXB5IGFzIHJwcgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFR1cGxlLCBVbmlvbgoKZnJvbSAuZG9tIGltcG9ydCBldmVudHNfZnJvbV90YWtlLCBzcGxpdF9ieV92b2ljZQpmcm9tIC5saWx5X2NvbnZlcnQgaW1wb3J0IHJlbmRlcl9zdGFmZgpmcm9tIC5saWx5X2V4cG9ydCBpbXBvcnQgcmVuZGVyCgpFWFRfU0VDVElPTiA9ICdMZXZpdGFudXNfUmVhU2NvcmUnCgoKY2xhc3MgUHJvamVjdEluc3BlY3RvcjoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJvamVjdDogT3B0aW9uYWxbcnByLlByb2plY3RdID0gTm9uZSkgLT4gTm9uZToKICAgICAgICBpZiBwcm9qZWN0IGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYucHJvamVjdCA9IHJwci5Qcm9qZWN0KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnByb2plY3QgPSBwcm9qZWN0CgogICAgQHByb3BlcnR5CiAgICBkZWYgZXhwb3J0X2RpcihzZWxmKSAtPiBQYXRoOgogICAgICAgIGlmIHBhdGggOj0gc2VsZi5zdGF0ZSgnZXhwb3J0X2RpcicpOgogICAgICAgICAgICByZXR1cm4gcGF0aAogICAgICAgIHBhdGggPSBQYXRoKHNlbGYucHJvamVjdC5wYXRoKQogICAgICAgIGlmIG5vdCBwYXRoLmlzX2RpcigpOgogICAgICAgICAgICByZXR1cm4gcGF0aC5wYXJlbnQKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gcGF0aAoKICAgIGRlZiBzdGF0ZShzZWxmLAogICAgICAgICAgICAgIGtleTogc3RyLAogICAgICAgICAgICAgIHZhbHVlOiBPcHRpb25hbFtvYmplY3RdID0gTm9uZSkgLT4gT3B0aW9uYWxbb2JqZWN0XToKICAgICAgICBzdGF0ZSA9IHNlbGYucHJvamVjdC5nZXRfZXh0X3N0YXRlKEVYVF9TRUNUSU9OLCAnbWFpbicsIHBpY2tsZWQ9VHJ1ZSkKICAgICAgICBpZiBub3Qgc3RhdGU6CiAgICAgICAgICAgIHN0YXRlID0ge30KICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc3RhdGVba2V5XSA9IHZhbHVlCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgcmV0dXJuIE5vbmUgaWYga2V5IG5vdCBpbiBzdGF0ZSBlbHNlIHN0YXRlW2tleV0KCiAgICBAcHJvcGVydHkKICAgIGRlZiB0ZW1wX3BkZihzZWxmKSAtPiBQYXRoOgogICAgICAgIHBhdGggPSBQYXRoKHNlbGYucHJvamVjdC5wYXRoKQogICAgICAgIGlmIG5vdCBwYXRoLmlzX2RpcigpOgogICAgICAgICAgICByZXR1cm4gcGF0aC5wYXJlbnQuam9pbnBhdGgoJ3RlbXAucGRmJykKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gcGF0aC5qb2lucGF0aCgndGVtcC5wZGYnKQoKCmNsYXNzIFRyYWNrSW5zcGVjdG9yOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFjazogT3B0aW9uYWxbVW5pb25bcnByLlRyYWNrLCBzdHJdXSA9IE5vbmUpIC0+IE5vbmU6CiAgICAgICAgaWYgdHJhY2sgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi50cmFjayA9IHJwci5Qcm9qZWN0KCkuc2VsZWN0ZWRfdHJhY2tzWzBdCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKHRyYWNrLCBzdHIpOgogICAgICAgICAgICBzZWxmLnRyYWNrID0gcnByLlRyYWNrLmZyb21fR1VJRCh0cmFjaykKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnRyYWNrID0gdHJhY2sKICAgICAgICBzZWxmLmd1aWQgPSBzZWxmLnRyYWNrLkdVSUQKCiAgICBkZWYgc3RhdGUoc2VsZiwKICAgICAgICAgICAgICBrZXk6IHN0ciwKICAgICAgICAgICAgICB2YWx1ZTogT3B0aW9uYWxbb2JqZWN0XSA9IE5vbmUpIC0+IE9wdGlvbmFsW29iamVjdF06CiAgICAgICAgc3RhdGUgPSBzZWxmLnRyYWNrLnByb2plY3QuZ2V0X2V4dF9zdGF0ZSgKICAgICAgICAgICAgRVhUX1NFQ1RJT04sIHNlbGYuZ3VpZCwgcGlja2xlZD1UcnVlCiAgICAgICAgKQogICAgICAgIGlmIG5vdCBzdGF0ZToKICAgICAgICAgICAgc3RhdGUgPSB7fQogICAgICAgIGlmIHZhbHVlIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzdGF0ZVtrZXldID0gdmFsdWUKICAgICAgICAgICAgc2VsZi50cmFjay5wcm9qZWN0LnNldF9leHRfc3RhdGUoCiAgICAgICAgICAgICAgICBFWFRfU0VDVElPTiwgc2VsZi5ndWlkLCBzdGF0ZSwgcGlja2xlZD1UcnVlCiAgICAgICAgICAgICkKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICByZXR1cm4gTm9uZSBpZiBrZXkgbm90IGluIHN0YXRlIGVsc2Ugc3RhdGVba2V5XQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHBhcnRfbmFtZShzZWxmKSAtPiBzdHI6CiAgICAgICAgaWYgbmFtZSA6PSBzZWxmLnN0YXRlKCdwYXJ0X25hbWUnKToKICAgICAgICAgICAgcmV0dXJuIG5hbWUKICAgICAgICBpZiBycHIuc2hvd19tZXNzYWdlX2JveCgKICAgICAgICAgICAgJ1BhcnQgbmFtZSBpcyBub3QgcHJvdmlkZWQuIERvIFlvdSB3aXNoIHRvIHVzZSB0cmFjayBuYW1lPycsCiAgICAgICAgICAgICdwYXJ0IG5hbWUgZGlhbG9nJywgJ29rLWNhbmNlbCcKICAgICAgICApID09ICdvayc6CiAgICAgICAgICAgIG5hbWUgPSBzZWxmLnRyYWNrLm5hbWUKICAgICAgICAgICAgc2VsZi5zdGF0ZSgncGFydF9uYW1lJywgbmFtZSkKICAgICAgICAgICAgcmV0dXJuIG5hbWUKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBuYW1lID0gcnByLmdldF91c2VyX2lucHV0cygKICAgICAgICAgICAgICAgICAgICAnUGxlYXNlLCBwcm92aWRlIHBhcnQgbmFtZTonLCBbJ3BhcnQgbmFtZSddCiAgICAgICAgICAgICAgICApWydwYXJ0IG5hbWUnXQogICAgICAgICAgICAgICAgc2VsZi5zdGF0ZSgncGFydF9uYW1lJywgbmFtZSkKICAgICAgICAgICAgICAgIHJldHVybiBuYW1lCiAgICAgICAgICAgIGV4Y2VwdCBSdW50aW1lRXJyb3I6CiAgICAgICAgICAgICAgICBleGl0KCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBleHBvcnRfcGF0aChzZWxmKSAtPiBQYXRoOgogICAgICAgIGRpcl8gPSBQcm9qZWN0SW5zcGVjdG9yKCkuZXhwb3J0X2RpcgogICAgICAgIHJldHVybiBkaXJfLmpvaW5wYXRoKGYie3NlbGYucGFydF9uYW1lfS5seSIpCgogICAgZGVmIHJlbmRlcihzZWxmKSAtPiBOb25lOgogICAgICAgIGV2ZW50cyA9IHt9CiAgICAgICAgZXhwb3J0X3BhdGggPSBzZWxmLmV4cG9ydF9wYXRoCiAgICAgICAgZm9yIGl0ZW0gaW4gc2VsZi50cmFjay5pdGVtczoKICAgICAgICAgICAgcHJpbnQoaXRlbS50cmFjaywgaXRlbS50cmFjay5uYW1lLCBpdGVtKQogICAgICAgICAgICBldmVudHMudXBkYXRlKGV2ZW50c19mcm9tX3Rha2UoaXRlbS5hY3RpdmVfdGFrZSkpCiAgICAgICAgcHJpbnQoZXZlbnRzKQogICAgICAgIGxpbHkgPSByZW5kZXJfc3RhZmYoc3BsaXRfYnlfdm9pY2UoZXZlbnRzKSkKICAgICAgICBwZGYgPSByZW5kZXIobGlseSwgZXhwb3J0X3BhdGgpCiAgICAgICAgcHJpbnQocGRmLCBQcm9qZWN0SW5zcGVjdG9yKCkudGVtcF9wZGYpCiAgICAgICAgd2hpbGUgbm90IHBkZi5leGlzdHMoKToKICAgICAgICAgICAgLi4uCiAgICAgICAgIyBjb3B5ZmlsZShzdHIocGRmKSwgc3RyKFByb2plY3RJbnNwZWN0b3IoKS50ZW1wX3BkZikpCiAgICAgICAgd2l0aCBvcGVuKHBkZiwgJ3JiJykgYXMgaW5fOgogICAgICAgICAgICB3aXRoIG9wZW4oUHJvamVjdEluc3BlY3RvcigpLnRlbXBfcGRmLCAnd2InKSBhcyBvdXQ6CiAgICAgICAgICAgICAgICBvdXQud3JpdGUoaW5fLnJlYWQoKSkKICAgICAgICAgICAgICAgIG91dC50cnVuY2F0ZSgpCg",
					"AQAAAAAAAAABAAAAyw0AAAAAAADLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAABkAAAAAAAAAGwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACcAAAAAAAAAKQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAug4AAAAAAAC6DgAAZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCiMgaW1wb3J0IHRpbWUKIyBmcm9tIHNodXRpbCBpbXBvcnQgY29weWZpbGUKCmltcG9ydCByZWFweSBhcyBycHIKZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBUdXBsZSwgVW5pb24KCmZyb20gLmRvbSBpbXBvcnQgZXZlbnRzX2Zyb21fdGFrZSwgc3BsaXRfYnlfdm9pY2UKZnJvbSAubGlseV9jb252ZXJ0IGltcG9ydCByZW5kZXJfc3RhZmYKZnJvbSAubGlseV9leHBvcnQgaW1wb3J0IHJlbmRlcgoKRVhUX1NFQ1RJT04gPSAnTGV2aXRhbnVzX1JlYVNjb3JlJwoKCmNsYXNzIFByb2plY3RJbnNwZWN0b3I6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHByb2plY3Q6IE9wdGlvbmFsW3Jwci5Qcm9qZWN0XSA9IE5vbmUpIC0+IE5vbmU6CiAgICAgICAgaWYgcHJvamVjdCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnByb2plY3QgPSBycHIuUHJvamVjdCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5wcm9qZWN0ID0gcHJvamVjdAoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGV4cG9ydF9kaXIoc2VsZikgLT4gUGF0aDoKICAgICAgICBpZiBwYXRoIDo9IHNlbGYuc3RhdGUoJ2V4cG9ydF9kaXInKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgKICAgICAgICBwYXRoID0gUGF0aChzZWxmLnByb2plY3QucGF0aCkKICAgICAgICBpZiBub3QgcGF0aC5pc19kaXIoKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgucGFyZW50CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHBhdGgKCiAgICBkZWYgc3RhdGUoc2VsZiwKICAgICAgICAgICAgICBrZXk6IHN0ciwKICAgICAgICAgICAgICB2YWx1ZTogT3B0aW9uYWxbb2JqZWN0XSA9IE5vbmUpIC0+IE9wdGlvbmFsW29iamVjdF06CiAgICAgICAgc3RhdGUgPSBzZWxmLnByb2plY3QuZ2V0X2V4dF9zdGF0ZShFWFRfU0VDVElPTiwgJ21haW4nLCBwaWNrbGVkPVRydWUpCiAgICAgICAgaWYgbm90IHN0YXRlOgogICAgICAgICAgICBzdGF0ZSA9IHt9CiAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHN0YXRlW2tleV0gPSB2YWx1ZQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIHJldHVybiBOb25lIGlmIGtleSBub3QgaW4gc3RhdGUgZWxzZSBzdGF0ZVtrZXldCgogICAgQHByb3BlcnR5CiAgICBkZWYgdGVtcF9wZGYoc2VsZikgLT4gUGF0aDoKICAgICAgICBwYXRoID0gUGF0aChzZWxmLnByb2plY3QucGF0aCkKICAgICAgICBpZiBub3QgcGF0aC5pc19kaXIoKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgucGFyZW50LmpvaW5wYXRoKCd0ZW1wLnBkZicpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHBhdGguam9pbnBhdGgoJ3RlbXAucGRmJykKCgpjbGFzcyBUcmFja0luc3BlY3RvcjoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdHJhY2s6IE9wdGlvbmFsW1VuaW9uW3Jwci5UcmFjaywgc3RyXV0gPSBOb25lKSAtPiBOb25lOgogICAgICAgIGlmIHRyYWNrIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYudHJhY2sgPSBycHIuUHJvamVjdCgpLnNlbGVjdGVkX3RyYWNrc1swXQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh0cmFjaywgc3RyKToKICAgICAgICAgICAgc2VsZi50cmFjayA9IHJwci5UcmFjay5mcm9tX0dVSUQodHJhY2spCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi50cmFjayA9IHRyYWNrCiAgICAgICAgc2VsZi5ndWlkID0gc2VsZi50cmFjay5HVUlECgogICAgZGVmIHN0YXRlKHNlbGYsCiAgICAgICAgICAgICAga2V5OiBzdHIsCiAgICAgICAgICAgICAgdmFsdWU6IE9wdGlvbmFsW29iamVjdF0gPSBOb25lKSAtPiBPcHRpb25hbFtvYmplY3RdOgogICAgICAgIHN0YXRlID0gc2VsZi50cmFjay5wcm9qZWN0LmdldF9leHRfc3RhdGUoCiAgICAgICAgICAgIEVYVF9TRUNUSU9OLCBzZWxmLmd1aWQsIHBpY2tsZWQ9VHJ1ZQogICAgICAgICkKICAgICAgICBpZiBub3Qgc3RhdGU6CiAgICAgICAgICAgIHN0YXRlID0ge30KICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc3RhdGVba2V5XSA9IHZhbHVlCiAgICAgICAgICAgIHNlbGYudHJhY2sucHJvamVjdC5zZXRfZXh0X3N0YXRlKAogICAgICAgICAgICAgICAgRVhUX1NFQ1RJT04sIHNlbGYuZ3VpZCwgc3RhdGUsIHBpY2tsZWQ9VHJ1ZQogICAgICAgICAgICApCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgcmV0dXJuIE5vbmUgaWYga2V5IG5vdCBpbiBzdGF0ZSBlbHNlIHN0YXRlW2tleV0KCiAgICBAcHJvcGVydHkKICAgIGRlZiBwYXJ0X25hbWUoc2VsZikgLT4gc3RyOgogICAgICAgIGlmIG5hbWUgOj0gc2VsZi5zdGF0ZSgncGFydF9uYW1lJyk6CiAgICAgICAgICAgIHJldHVybiBuYW1lCiAgICAgICAgaWYgcnByLnNob3dfbWVzc2FnZV9ib3goCiAgICAgICAgICAgICdQYXJ0IG5hbWUgaXMgbm90IHByb3ZpZGVkLiBEbyBZb3Ugd2lzaCB0byB1c2UgdHJhY2sgbmFtZT8nLAogICAgICAgICAgICAncGFydCBuYW1lIGRpYWxvZycsICdvay1jYW5jZWwnCiAgICAgICAgKSA9PSAnb2snOgogICAgICAgICAgICBuYW1lID0gc2VsZi50cmFjay5uYW1lCiAgICAgICAgICAgIHNlbGYuc3RhdGUoJ3BhcnRfbmFtZScsIG5hbWUpCiAgICAgICAgICAgIHJldHVybiBuYW1lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbmFtZSA9IHJwci5nZXRfdXNlcl9pbnB1dHMoCiAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSwgcHJvdmlkZSBwYXJ0IG5hbWU6JywgWydwYXJ0IG5hbWUnXQogICAgICAgICAgICAgICAgKVsncGFydCBuYW1lJ10KICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUoJ3BhcnRfbmFtZScsIG5hbWUpCiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZQogICAgICAgICAgICBleGNlcHQgUnVudGltZUVycm9yOgogICAgICAgICAgICAgICAgZXhpdCgpCgogICAgQHByb3BlcnR5CiAgICBkZWYgZXhwb3J0X3BhdGgoc2VsZikgLT4gUGF0aDoKICAgICAgICBkaXJfID0gUHJvamVjdEluc3BlY3RvcigpLmV4cG9ydF9kaXIKICAgICAgICByZXR1cm4gZGlyXy5qb2lucGF0aChmIntzZWxmLnBhcnRfbmFtZX0ubHkiKQoKICAgIGRlZiByZW5kZXIoc2VsZikgLT4gTm9uZToKICAgICAgICBldmVudHMgPSB7fQogICAgICAgIGV4cG9ydF9wYXRoID0gc2VsZi5leHBvcnRfcGF0aAogICAgICAgIGZvciBpdGVtIGluIHNlbGYudHJhY2suaXRlbXM6CiAgICAgICAgICAgIHByaW50KGl0ZW0udHJhY2ssIGl0ZW0udHJhY2submFtZSwgaXRlbSkKICAgICAgICAgICAgZXZlbnRzLnVwZGF0ZShldmVudHNfZnJvbV90YWtlKGl0ZW0uYWN0aXZlX3Rha2UpKQogICAgICAgIHByaW50KGV2ZW50cykKICAgICAgICBsaWx5ID0gcmVuZGVyX3N0YWZmKHNwbGl0X2J5X3ZvaWNlKGV2ZW50cykpCiAgICAgICAgcGRmID0gcmVuZGVyKGxpbHksIGV4cG9ydF9wYXRoKQogICAgICAgIHByaW50KHBkZiwgUHJvamVjdEluc3BlY3RvcigpLnRlbXBfcGRmKQogICAgICAgIHdoaWxlIG5vdCBwZGYuZXhpc3RzKCk6CiAgICAgICAgICAgIC4uLgogICAgICAgICMgY29weWZpbGUoc3RyKHBkZiksIHN0cihQcm9qZWN0SW5zcGVjdG9yKCkudGVtcF9wZGYpKQogICAgICAgIHdpdGggb3BlbihwZGYsICdyYicpIGFzIGluXzoKICAgICAgICAgICAgd2l0aCBvcGVuKFByb2plY3RJbnNwZWN0b3IoKS50ZW1wX3BkZiwgJ3diJykgYXMgb3V0OgogICAgICAgICAgICAgICAgb3V0LndyaXRlKGluXy5yZWFkKCkpCiAgICAgICAgICAgICAgICBvdXQudHJ1bmNhdGUoKQo",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAug4AAAAAAAC6DgAAZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCiMgaW1wb3J0IHRpbWUKIyBmcm9tIHNodXRpbCBpbXBvcnQgY29weWZpbGUKCmltcG9ydCByZWFweSBhcyBycHIKZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBUdXBsZSwgVW5pb24KCmZyb20gLmRvbSBpbXBvcnQgZXZlbnRzX2Zyb21fdGFrZSwgc3BsaXRfYnlfdm9pY2UKZnJvbSAubGlseV9jb252ZXJ0IGltcG9ydCByZW5kZXJfc3RhZmYKZnJvbSAubGlseV9leHBvcnQgaW1wb3J0IHJlbmRlcgoKRVhUX1NFQ1RJT04gPSAnTGV2aXRhbnVzX1JlYVNjb3JlJwoKCmNsYXNzIFByb2plY3RJbnNwZWN0b3I6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHByb2plY3Q6IE9wdGlvbmFsW3Jwci5Qcm9qZWN0XSA9IE5vbmUpIC0+IE5vbmU6CiAgICAgICAgaWYgcHJvamVjdCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnByb2plY3QgPSBycHIuUHJvamVjdCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5wcm9qZWN0ID0gcHJvamVjdAoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGV4cG9ydF9kaXIoc2VsZikgLT4gUGF0aDoKICAgICAgICBpZiBwYXRoIDo9IHNlbGYuc3RhdGUoJ2V4cG9ydF9kaXInKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgKICAgICAgICBwYXRoID0gUGF0aChzZWxmLnByb2plY3QucGF0aCkKICAgICAgICBpZiBub3QgcGF0aC5pc19kaXIoKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgucGFyZW50CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHBhdGgKCiAgICBkZWYgc3RhdGUoc2VsZiwKICAgICAgICAgICAgICBrZXk6IHN0ciwKICAgICAgICAgICAgICB2YWx1ZTogT3B0aW9uYWxbb2JqZWN0XSA9IE5vbmUpIC0+IE9wdGlvbmFsW29iamVjdF06CiAgICAgICAgc3RhdGUgPSBzZWxmLnByb2plY3QuZ2V0X2V4dF9zdGF0ZShFWFRfU0VDVElPTiwgJ21haW4nLCBwaWNrbGVkPVRydWUpCiAgICAgICAgaWYgbm90IHN0YXRlOgogICAgICAgICAgICBzdGF0ZSA9IHt9CiAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHN0YXRlW2tleV0gPSB2YWx1ZQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIHJldHVybiBOb25lIGlmIGtleSBub3QgaW4gc3RhdGUgZWxzZSBzdGF0ZVtrZXldCgogICAgQHByb3BlcnR5CiAgICBkZWYgdGVtcF9wZGYoc2VsZikgLT4gUGF0aDoKICAgICAgICBwYXRoID0gUGF0aChzZWxmLnByb2plY3QucGF0aCkKICAgICAgICBpZiBub3QgcGF0aC5pc19kaXIoKToKICAgICAgICAgICAgcmV0dXJuIHBhdGgucGFyZW50LmpvaW5wYXRoKCd0ZW1wLnBkZicpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHBhdGguam9pbnBhdGgoJ3RlbXAucGRmJykKCgpjbGFzcyBUcmFja0luc3BlY3RvcjoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdHJhY2s6IE9wdGlvbmFsW1VuaW9uW3Jwci5UcmFjaywgc3RyXV0gPSBOb25lKSAtPiBOb25lOgogICAgICAgIGlmIHRyYWNrIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYudHJhY2sgPSBycHIuUHJvamVjdCgpLnNlbGVjdGVkX3RyYWNrc1swXQogICAgICAgIGVsaWYgaXNpbnN0YW5jZSh0cmFjaywgc3RyKToKICAgICAgICAgICAgc2VsZi50cmFjayA9IHJwci5UcmFjay5mcm9tX0dVSUQodHJhY2spCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi50cmFjayA9IHRyYWNrCiAgICAgICAgc2VsZi5ndWlkID0gc2VsZi50cmFjay5HVUlECgogICAgZGVmIHN0YXRlKHNlbGYsCiAgICAgICAgICAgICAga2V5OiBzdHIsCiAgICAgICAgICAgICAgdmFsdWU6IE9wdGlvbmFsW29iamVjdF0gPSBOb25lKSAtPiBPcHRpb25hbFtvYmplY3RdOgogICAgICAgIHN0YXRlID0gc2VsZi50cmFjay5wcm9qZWN0LmdldF9leHRfc3RhdGUoCiAgICAgICAgICAgIEVYVF9TRUNUSU9OLCBzZWxmLmd1aWQsIHBpY2tsZWQ9VHJ1ZQogICAgICAgICkKICAgICAgICBpZiBub3Qgc3RhdGU6CiAgICAgICAgICAgIHN0YXRlID0ge30KICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc3RhdGVba2V5XSA9IHZhbHVlCiAgICAgICAgICAgIHNlbGYudHJhY2sucHJvamVjdC5zZXRfZXh0X3N0YXRlKAogICAgICAgICAgICAgICAgRVhUX1NFQ1RJT04sIHNlbGYuZ3VpZCwgc3RhdGUsIHBpY2tsZWQ9VHJ1ZQogICAgICAgICAgICApCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgcmV0dXJuIE5vbmUgaWYga2V5IG5vdCBpbiBzdGF0ZSBlbHNlIHN0YXRlW2tleV0KCiAgICBAcHJvcGVydHkKICAgIGRlZiBwYXJ0X25hbWUoc2VsZikgLT4gc3RyOgogICAgICAgIGlmIG5hbWUgOj0gc2VsZi5zdGF0ZSgncGFydF9uYW1lJyk6CiAgICAgICAgICAgIHJldHVybiBuYW1lCiAgICAgICAgaWYgcnByLnNob3dfbWVzc2FnZV9ib3goCiAgICAgICAgICAgICdQYXJ0IG5hbWUgaXMgbm90IHByb3ZpZGVkLiBEbyBZb3Ugd2lzaCB0byB1c2UgdHJhY2sgbmFtZT8nLAogICAgICAgICAgICAncGFydCBuYW1lIGRpYWxvZycsICdvay1jYW5jZWwnCiAgICAgICAgKSA9PSAnb2snOgogICAgICAgICAgICBuYW1lID0gc2VsZi50cmFjay5uYW1lCiAgICAgICAgICAgIHNlbGYuc3RhdGUoJ3BhcnRfbmFtZScsIG5hbWUpCiAgICAgICAgICAgIHJldHVybiBuYW1lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbmFtZSA9IHJwci5nZXRfdXNlcl9pbnB1dHMoCiAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSwgcHJvdmlkZSBwYXJ0IG5hbWU6JywgWydwYXJ0IG5hbWUnXQogICAgICAgICAgICAgICAgKVsncGFydCBuYW1lJ10KICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUoJ3BhcnRfbmFtZScsIG5hbWUpCiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZQogICAgICAgICAgICBleGNlcHQgUnVudGltZUVycm9yOgogICAgICAgICAgICAgICAgZXhpdCgpCgogICAgQHByb3BlcnR5CiAgICBkZWYgZXhwb3J0X3BhdGgoc2VsZikgLT4gUGF0aDoKICAgICAgICBkaXJfID0gUHJvamVjdEluc3BlY3RvcigpLmV4cG9ydF9kaXIKICAgICAgICByZXR1cm4gZGlyXy5qb2lucGF0aChmIntzZWxmLnBhcnRfbmFtZX0ubHkiKQoKICAgIGRlZiByZW5kZXIoc2VsZikgLT4gTm9uZToKICAgICAgICBldmVudHMgPSB7fQogICAgICAgIGV4cG9ydF9wYXRoID0gc2VsZi5leHBvcnRfcGF0aAogICAgICAgIGZvciBpdGVtIGluIHNlbGYudHJhY2suaXRlbXM6CiAgICAgICAgICAgIHByaW50KGl0ZW0udHJhY2ssIGl0ZW0udHJhY2submFtZSwgaXRlbSkKICAgICAgICAgICAgZXZlbnRzLnVwZGF0ZShldmVudHNfZnJvbV90YWtlKGl0ZW0uYWN0aXZlX3Rha2UpKQogICAgICAgIHByaW50KGV2ZW50cykKICAgICAgICBsaWx5ID0gcmVuZGVyX3N0YWZmKHNwbGl0X2J5X3ZvaWNlKGV2ZW50cykpCiAgICAgICAgcGRmID0gcmVuZGVyKGxpbHksIGV4cG9ydF9wYXRoKQogICAgICAgIHByaW50KHBkZiwgUHJvamVjdEluc3BlY3RvcigpLnRlbXBfcGRmKQogICAgICAgIHdoaWxlIG5vdCBwZGYuZXhpc3RzKCk6CiAgICAgICAgICAgIC4uLgogICAgICAgICMgY29weWZpbGUoc3RyKHBkZiksIHN0cihQcm9qZWN0SW5zcGVjdG9yKCkudGVtcF9wZGYpKQogICAgICAgIHdpdGggb3BlbihwZGYsICdyYicpIGFzIGluXzoKICAgICAgICAgICAgd2l0aCBvcGVuKFByb2plY3RJbnNwZWN0b3IoKS50ZW1wX3BkZiwgJ3diJykgYXMgb3V0OgogICAgICAgICAgICAgICAgb3V0LndyaXRlKGluXy5yZWFkKCkpCiAgICAgICAgICAgICAgICBvdXQudHJ1bmNhdGUoKQo",
					"AQAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAAAAWgAAAAAAAABaAAAAAAAAAAAAAAAAAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAAAAtwAAAAAAAAC3AAAAAAAAAAAAAAAAAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/dom.py",
			"settings":
			{
				"buffer_size": 6465,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAZgAAAAAAAABmAAAAAAAAAAAAAAAAAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/primitives.py",
			"settings":
			{
				"buffer_size": 13251,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					120,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAMyAAAAAAAAAzIAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					2,
					"left_delete",
					null,
					"AgAAAPwhAAAAAAAA/CEAAAAAAAAOAAAAICMgdHlwZTppZ25vcmX7IQAAAAAAAPshAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAA/CEAAAAAAAAKIgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAADQiAAAAAAAANCIAAAAAAAAMAAAALmZvcl9saWJyb3Nh",
					"AQAAAAAAAAABAAAANCIAAAAAAABAIgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAANCIAAAAAAAA0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"right_delete",
					null,
					"AQAAAOYhAAAAAAAA5iEAAAAAAAAIAAAAbGlicm9zYS4",
					"AQAAAAAAAAABAAAA7iEAAAAAAADmIQAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "scale"
					},
					"BgAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA4QAAAAAAAADhAAAAAAAAAAoAAABwcmltaXRpdmVz4QAAAAAAAADiAAAAAAAAAAAAAADiAAAAAAAAAOMAAAAAAAAAAAAAAOMAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAA5QAAAAAAAADlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"cut",
					null,
					"AQAAABQBAAAAAAAAFAEAAAAAAAAKAAAARU5IQVJNX0FDQw",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					2,
					"left_delete",
					null,
					"AgAAAPgAAAAAAAAA+AAAAAAAAAAcAAAAZnJvbSByZWFfc2NvcmUuc2NhbGUgaW1wb3J0IPcAAAAAAAAA9wAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFAEAAAAAAAD4AAAAAAAAAAAAAAAAAAAA"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPcAAAAAAAAA+AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wAAAAAAAAD3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"paste",
					null,
					"AQAAAPkAAAAAAAAAAwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAMBAAAAAAAABAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " mid"
					},
					"BAAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAACAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAEAAAAAAAAEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "i_to_note"
					},
					"CQAAAAgBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA4BAAAAAAAAAAAAAA4BAAAAAAAADwEAAAAAAAAAAAAADwEAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAEAAAAAAAAIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"cut",
					null,
					"AQAAAOgbAAAAAAAA6BsAAAAAAACJAAAAY2xhc3MgU2NhbGUoRW51bSk6CiAgICBtYWpvciA9ICdtYWpvcicKICAgIG1pbm9yID0gJ21pbm9yJwoKICAgIEBwcm9wZXJ0eQogICAgZGVmIGZvcl9saWJyb3NhKHNlbGYpIC0+IHN0cjoKICAgICAgICByZXR1cm4gc2VsZi52YWx1ZVs6M10",
					"AQAAAAAAAAABAAAAcRwAAAAAAADoGwAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAFiAAAAAAAAAWIAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-pyright\",\"item\":{\"kind\":7,\"textEdit\":{\"newText\":\"Scale\",\"range\":{\"end\":{\"line\":253,\"character\":51},\"start\":{\"line\":253,\"character\":46}}},\"label\":\"Scale\",\"detail\":\"Auto-import\",\"sortText\":\"12.9999.Scale\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"```\\nfrom rea_score.primitives import Scale\\n```\"},\"data\":{\"filePath\":\"/media/levitanus/RAID/gits/ReaScore/rea_score/primitives.py\",\"position\":{\"line\":253,\"character\":51},\"symbolLabel\":\"Scale\",\"autoImportText\":\"```\\nfrom rea_score.primitives import Scale\\n```\",\"workspacePath\":\"/home/levitanus/gits/ReaScore\"}}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							116,
							192,
							0
						],
						"trigger": "Scale"
					},
					"AgAAAMMfAAAAAAAAwx8AAAAAAAAFAAAAU2NhbGXDHwAAAAAAAMgfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyB8AAAAAAADIHwAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									7,
									38
								],
								[
									7,
									38
								],
								"\nfrom rea_score.primitives import Scale",
								null
							]
						]
					},
					"AQAAAM8AAAAAAAAA9gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyB8AAAAAAADIHwAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"cut",
					null,
					"AQAAAPEAAAAAAAAA8QAAAAAAAAAFAAAAU2NhbGU",
					"AQAAAAAAAAABAAAA8QAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADMBAAAAAAAANAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"paste",
					null,
					"AQAAADQBAAAAAAAAOQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAEAAAAAAAA0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					2,
					"left_delete",
					null,
					"AgAAANAAAAAAAAAA0AAAAAAAAAAhAAAAZnJvbSByZWFfc2NvcmUucHJpbWl0aXZlcyBpbXBvcnQgzwAAAAAAAADPAAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA8QAAAAAAAADQAAAAAAAAAAAAAAAAAAAA"
				],
				[
					224,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"right_delete",
					null,
					"AQAAANYAAAAAAAAA1gAAAAAAAAAJAAAAcmVhX3Njb3Jl",
					"AQAAAAAAAAABAAAA3wAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/levitanus/.local/lib/python3.9/site-packages/librosa/core/convert.py",
			"settings":
			{
				"buffer_size": 58978,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/levitanus/.local/lib/python3.9/site-packages/librosa/core/notation.py",
			"settings":
			{
				"buffer_size": 17601,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/lily_convert.py",
			"settings":
			{
				"buffer_size": 4545,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "warnings"
					},
					"CQAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlAAAAAAAAAAcAAABsb2dnaW5nJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAAwREAAAAAAADFEQAAZnJvbSBmcmFjdGlvbnMgaW1wb3J0IEZyYWN0aW9uCmZyb20gd2FybmluZ3MgaW1wb3J0IHdhcm4KZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIE5ld1R5cGUsIE9wdGlvbmFsLCBUdXBsZSwgVW5pb24KaW1wb3J0IHJlCgpmcm9tIC5kb20gaW1wb3J0IFZvaWNlLCBldmVudHNfZnJvbV90YWtlLCBzcGxpdF9ieV92b2ljZQpmcm9tIC5wcmltaXRpdmVzIGltcG9ydCBDaG9yZCwgRXZlbnQsIEtleSwgTGVuZ3RoLCBQaXRjaCwgUG9zaXRpb24sIFNjYWxlCgppbXBvcnQgcmVhcHkgYXMgcnByCmltcG9ydCBhYmphZAoKS0VZID0gS2V5KCdmaXMnLCBTY2FsZS5tYWpvcikKCgpkZWYgcmVuZGVyX3N0YWZmKHZvaWNlczogRGljdFtpbnQsIFZvaWNlXSkgLT4gc3RyOgogICAgc3RhZmYgPSAiIiJcXG5ldyBTdGFmZiA8PHt2b2ljZXN9Pj4iIiIKICAgIHJlbmRlcmVkX3ZvaWNlcyA9IFtdCiAgICBmb3IgaW5kZXgsIHZvaWNlIGluIHZvaWNlcy5pdGVtcygpOgogICAgICAgIHJlbmRlcmVkX3ZvaWNlcy5hcHBlbmQocmVuZGVyX3ZvaWNlKHZvaWNlLCBpbmRleCkpCiAgICByZXR1cm4gc3RhZmYuZm9ybWF0KHZvaWNlcz0nXG4nLmpvaW4ocmVuZGVyZWRfdm9pY2VzKSkKCgpkZWYgcmVuZGVyX3ZvaWNlKAogICAgdm9pY2U6IFZvaWNlLAogICAgaW5kZXg6IE9wdGlvbmFsW2ludF0gPSBOb25lLAogICAgbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUKKSAtPiBzdHI6CiAgICB2b2ljZS5zb3J0KCkKICAgIHZvaWNlID0gdm9pY2Uud2l0aF9yZXN0cygpCiAgICBhcmdzID0ge30KICAgIGlmIG5hbWU6CiAgICAgICAgaWYgaW5kZXg6CiAgICAgICAgICAgIG5hbWUgPSBmJ3tuYW1lfWluZGV4JwogICAgICAgIGFyZ3NbJ25hbWUnXSA9IG5hbWUKICAgIG91dCA9IFtdCiAgICBmb3IgZXZlbnQgaW4gdm9pY2UuZXZlbnRzLnZhbHVlcygpOgogICAgICAgIGlmIGlzaW5zdGFuY2UoZXZlbnQsIENob3JkKToKICAgICAgICAgICAgb3V0LmFwcGVuZChyZW5kZXJfY2hvcmQoZXZlbnQpKQogICAgICAgIGVsaWYgaXNpbnN0YW5jZShldmVudCwgRXZlbnQpOgogICAgICAgICAgICBvdXQuYXBwZW5kKHJlbmRlcl9ldmVudChldmVudCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKGV2ZW50KQogICAga2V5ID0gS0VZLmx5X3JlbmRlcigpCiAgICByZXR1cm4gZiJcXG5ldyBWb2ljZSB7e3trZXl9IHsnICcuam9pbihvdXQpfX19IgoKCmRlZiByZW5kZXJfZXZlbnQoZXZlbnQ6IEV2ZW50KSAtPiBzdHI6CiAgICBzdHJpbmcgPSAie3ByZWFtYnVsYX17cGl0Y2h9e2xlbmd0aH17bm90YXRpb25zfXt0aWV9e3RpZWR9IgogICAgaWYgZXZlbnQubGVuZ3RoID09IDA6CiAgICAgICAgd2FybihmJ1plcm8ta2VuZ3RoIGV2ZW50OiB7ZXZlbnR9LCByZXR1cm5pbmcgbnVsbCcpCiAgICAgICAgcmV0dXJuICcnCiAgICBsZW5ndGgsIHRpZWQgPSByZW5kZXJfbGVuZ3RoKAogICAgICAgIGV2ZW50Lmxlbmd0aCwgcmVzdD0oZXZlbnQucGl0Y2gubWlkaV9waXRjaCBpcyBOb25lKQogICAgKQogICAgcGl0Y2gsIHRpZSA9IHJlbmRlcl9waXRjaChldmVudC5waXRjaCkKICAgIGlmIGV2ZW50Lmxlbmd0aC5mdWxsX2JhcjoKICAgICAgICBwaXRjaCA9IHJlLnN1YigncicsICdSJywgcGl0Y2gpCiAgICAjIGlmIHRpZWQgYW5kIHRpZToKICAgICMgICAgIHRpZSA9ICcnCiAgICByZXR1cm4gc3RyaW5nLmZvcm1hdCgKICAgICAgICBwcmVhbWJ1bGE9cmVuZGVyX3ByZWFtYnVsYShldmVudCksCiAgICAgICAgcGl0Y2g9cGl0Y2gsCiAgICAgICAgbGVuZ3RoPWxlbmd0aCwKICAgICAgICBub3RhdGlvbnM9JycsCiAgICAgICAgdGllPXRpZSwKICAgICAgICB0aWVkPXRpZWQKICAgICkKCgpkZWYgcmVuZGVyX2Nob3JkKGNob3JkOiBDaG9yZCkgLT4gc3RyOgogICAgc3RyaW5nID0gIntwcmVhbWJ1bGF9PHtwaXRjaGVzfT57bGVuZ3RofXtub3RhdGlvbnN9e3RpZX17dGllZH0iCiAgICBwaXRjaGVzID0gW10KICAgIGZvciBwaXRjaCBpbiBjaG9yZC5waXRjaGVzOgogICAgICAgIHBpdGNoZXMuYXBwZW5kKCcnLmpvaW4ocmVuZGVyX3BpdGNoKHBpdGNoKSkpCiAgICBsZW5ndGgsIHRpZWQgPSByZW5kZXJfbGVuZ3RoKGNob3JkLmxlbmd0aCkKICAgIGlmIHRpZWQ6CiAgICAgICAgdGllID0gJ34nCiAgICBlbHNlOgogICAgICAgIHRpZSA9ICcnCiAgICByZXR1cm4gc3RyaW5nLmZvcm1hdCgKICAgICAgICBwcmVhbWJ1bGE9cmVuZGVyX3ByZWFtYnVsYShjaG9yZCksCiAgICAgICAgcGl0Y2hlcz0nICcuam9pbihwaXRjaGVzKSwKICAgICAgICBsZW5ndGg9bGVuZ3RoLAogICAgICAgIG5vdGF0aW9ucz0nJywKICAgICAgICB0aWU9dGllLAogICAgICAgIHRpZWQ9dGllZAogICAgKQoKCmRlZiByZW5kZXJfcHJlYW1idWxhKGV2ZW50OiBFdmVudCkgLT4gc3RyOgogICAgIyBvdXQgPSAnJwogICAgIyBmb3IgZWxtIGluIGV2ZW50LnByZWFtYnVsYToKICAgICMgICAgIG91dCArPSBlbG0ubHlfcmVuZGVyKCkKICAgICMgcmV0dXJuIG91dAogICAgcmV0dXJuICcnLmpvaW4oZWxtLmx5X3JlbmRlcigpIGZvciBlbG0gaW4gZXZlbnQucHJlYW1idWxhKQoKCmRlZiByZW5kZXJfbGVuZ3RoKGxlbmd0aDogTGVuZ3RoLCByZXN0OiBib29sID0gRmFsc2UpIC0+IFR1cGxlW3N0ciwgc3RyXToKICAgIHRpZWQgPSAnJwogICAgdGllID0gJ34gJwogICAgaWYgcmVzdDoKICAgICAgICB0aWUgPSAnIHInCiAgICBmb3IgaWR4LCBsdGggaW4gZW51bWVyYXRlKHJldmVyc2VkKGxlbmd0aC5ub3JtYWxpemVkKGxlbmd0aC5mcmFjdGlvbikpKToKICAgICAgICBpZiBpZHggPT0gMDoKICAgICAgICAgICAgaWYgbHRoID4gMToKICAgICAgICAgICAgICAgIGZfbHRoID0gJzEnCiAgICAgICAgICAgICAgICB0aWVkICs9IGZyYWN0aW9uX3RvX2xlbmd0aChsdGggLSAxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZl9sdGggPSBmcmFjdGlvbl90b19sZW5ndGgobHRoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRpZWQgKz0gdGllICsgZnJhY3Rpb25fdG9fbGVuZ3RoKGx0aCkKICAgIHJldHVybiBmX2x0aCwgdGllZAoKCmNsYXNzIEZyYWNFcnJvcihWYWx1ZUVycm9yKToKICAgIC4uLgoKCmRlZiBmcmFjdGlvbl90b19sZW5ndGgoZnJhYzogRnJhY3Rpb24pIC0+IHN0cjoKICAgIG51bSA9ICcnCiAgICBpZiBmcmFjLm51bWVyYXRvciA9PSAzOgogICAgICAgIG51bSA9ICcuJwogICAgICAgIGZyYWMgPSBmcmFjIC8gMyAqIDIKICAgICAgICBkZW5vbSA9IHN0cihmcmFjLmRlbm9taW5hdG9yKQogICAgZWxpZiBmcmFjLmRlbm9taW5hdG9yID09IDEgYW5kIGZyYWMubnVtZXJhdG9yID4gMToKICAgICAgICBkZW5vbSA9ICd+Jy5qb2luKFsnMSddICogZnJhYy5udW1lcmF0b3IpCiAgICBlbGlmIGZyYWMubnVtZXJhdG9yID09IDE6CiAgICAgICAgZGVub20gPSBzdHIoZnJhYy5kZW5vbWluYXRvcikKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgRnJhY0Vycm9yKGYibm8gcmlnaHQgY29uZGl0aW9uIHtmcmFjfSIpCiAgICAjIHByaW50KGZyYWMpCiAgICByZXR1cm4gZGVub20gKyBudW0KCgpkZWYgcmVuZGVyX3BpdGNoKHBpdGNoOiBQaXRjaCkgLT4gVHVwbGVbc3RyLCBzdHJdOgogICAgc3RyaW5nID0gcGl0Y2gubmFtZWRfcGl0Y2goS0VZKQogICAgc3RyaW5nID0gcmUuc3ViKCfima8nLCAnaXMnLCBzdHJpbmcpCiAgICBzdHJpbmcgPSByZS5zdWIoJ+KZrScsICdlcycsIHN0cmluZykKICAgIGlmIG0gOj0gcmUubWF0Y2gocicoLispKFxkKScsIHN0cmluZyk6CiAgICAgICAgbmFtZSwgb2N0YXZlID0gbS5ncm91cHMoKQogICAgICAgIGRpZmYgPSBpbnQob2N0YXZlKSAtIDMKICAgICAgICBpZiBkaWZmID4gMDoKICAgICAgICAgICAgb2N0YXZlID0gIiciICogZGlmZgogICAgICAgIGVsaWYgZGlmZiA8IDA6CiAgICAgICAgICAgIG9jdGF2ZSA9ICIsIiAqIC1kaWZmCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb2N0YXZlID0gJycKICAgIGVsc2U6CiAgICAgICAgbmFtZSA9IHBpdGNoLm5hbWVkX3BpdGNoKEtFWSkKICAgICAgICBvY3RhdmUgPSAnJwogICAgaWYgcGl0Y2gudGllOgogICAgICAgIHRpZSA9ICd+JwogICAgZWxzZToKICAgICAgICB0aWUgPSAnJwogICAgcmV0dXJuIG5hbWUubG93ZXIoKSArIG9jdGF2ZSwgdGllCgoKZGVmIGFueV90b19saWx5KG9iajogVW5pb25bVm9pY2UsIHJwci5UYWtlXSkgLT4gc3RyOgogICAgaWYgaXNpbnN0YW5jZShvYmosIHJwci5UYWtlKToKICAgICAgICByZXR1cm4gcmVuZGVyX3N0YWZmKHNwbGl0X2J5X3ZvaWNlKGV2ZW50c19mcm9tX3Rha2Uob2JqKSkpCiAgICBpZiBpc2luc3RhbmNlKG9iaiwgVm9pY2UpOgogICAgICAgIHJldHVybiByZW5kZXJfdm9pY2Uob2JqKQogICAgcmFpc2UgVHlwZUVycm9yKCJBY3R1YWxseSBub3QgbGl0ZXJhbGx5IGFueSEiKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB3aXRoIHJwci5pbnNpZGVfcmVhcGVyKCk6CiAgICAgICAgcHJpbnQoYW55X3RvX2xpbHkocnByLlByb2plY3QoKS5zZWxlY3RlZF9pdGVtc1swXS5hY3RpdmVfdGFrZSkpCg",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/MagicPython/settings/sublime/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/python3_my.sublime-build",
					""
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/python3_my.sublime-build",
					""
				]
			],
			[
				"Packages/MagicPython/settings/sublime/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"",
				"Anaconda: Goto object assignment"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"isor",
				"isort: sort imports"
			],
			[
				"prewi",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mar",
				"Markdown Preview: Preview in Browser"
			],
			[
				"previw",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"jed",
				"SublimeJedi: Show Signature"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"exit()",
			"isort_sort_imports",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/levitanus/gits/ReaScore",
		"/home/levitanus/gits/ReaScore/rea_score",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts",
		"/home/levitanus/gits/ReaScore/tests"
	],
	"file_history":
	[
		"/media/levitanus/RAID/gits/ReaScore/rea_score/dom.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_view_score.py",
		"/home/levitanus/gits/ReaScore/rea_score/lily_export.py",
		"/home/levitanus/gits/ReaScore/rea_score/lily_convert.py",
		"/home/levitanus/gits/ReaScore/rea_score/inspector.py",
		"/home/levitanus/gits/ReaScore/rea_score/dom.py",
		"/home/levitanus/gits/ReaScore/setup.py",
		"/home/levitanus/gits/ReaScore/tests/test_primitives.py",
		"/home/levitanus/gits/ReaScore/tests/test_lily_render.py",
		"/home/levitanus/gits/ReaScore/py.typed",
		"/home/levitanus/gits/ReaScore/primitives.py",
		"/home/levitanus/gits/ReaScore/dom.py",
		"/home/levitanus/gits/ReaScore/lily_convert.py",
		"/home/levitanus/gits/ReaScore/lily_export.py",
		"/home/levitanus/gits/ReaScore/inspector.py",
		"/home/levitanus/gits/ReaScore/ReaScore_view_score.py",
		"/home/levitanus/gits/ReaScore/simple_test.py",
		"/home/levitanus/gits/ReaScore/ReaScore_render_selected_track.py",
		"/home/levitanus/gits/ReaScore/ReaScore.sublime-project",
		"/home/levitanus/gits/ReaScore/test_primitives.py",
		"/home/levitanus/gits/ReaScore/test_lily_render.py",
		"/home/levitanus/gits/ReaScore/test.ly",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/Piccolo (test).ly",
		"/media/levitanus/RAID/gits/ReaScore/lily_convert.py",
		"/media/levitanus/RAID/gits/ReaScore/dom.py",
		"/media/levitanus/RAID/gits/ReaScore/lily_export.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/project/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/project/project.py",
		"/media/levitanus/RAID/gits/reapy/reapy/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/track/track.py",
		"/home/levitanus/.config/REAPER/Scripts/ReaTeam Extensions/API/ReaImGui_Demo.lua",
		"/home/levitanus/.config/REAPER/Scripts/ReaTeam Extensions/API/imgui_python.py",
		"/home/levitanus/.config/REAPER/UserPlugins/imgui_python.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilypond_old.py",
		"/home/levitanus/gits/ReaScore/.ropeproject/config.py",
		"/home/levitanus/gits/ReaScore/test_abjad.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilypond.py",
		"/home/levitanus/gits/reapy/reapy/core/project/project.py",
		"/home/levitanus/gits/ReaScore/export.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/envelope.py",
		"/home/levitanus/gits/reapy/reapy/core/track/send.py",
		"/home/levitanus/gits/reapy/reapy/core/reaper/reaper.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/item/midi_event.py",
		"/home/levitanus/gits/reapy/reapy/core/reapy_object.py",
		"/home/levitanus/gits/MyBigNote/my_big_note/staff.py",
		"/home/levitanus/gits/MyBigNote/my_big_note/midi_prefs.py",
		"/home/levitanus/gits/MyBigNote/my_big_note/midi_in.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/test.ly",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/musicxml.py",
		"/home/levitanus/gits/ReaExtensions/tests/test.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/music_dom.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/music_fractures.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/item/take.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/reaper/__init__.py",
		"/home/levitanus/.local/lib/python3.9/site-packages/abjad/__init__.py",
		"/usr/lib/python3.9/fractions.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/test.py",
		"/usr/lib/python3.9/pathlib.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilypond.ly",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lily_export.py",
		"/home/levitanus/gits/reapy/reapy/tools/_inside_reaper.pyi",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/imgui.py",
		"/home/levitanus/gits/reapy/reapy/core/track/track.py",
		"/home/levitanus/gits/reapy/reapy/tools/_inside_reaper.py",
		"/home/levitanus/gits/lilypond/python/langdefs.py",
		"/home/levitanus/gits/ReaExtensions/tests/test_lilypond_dom.py",
		"/home/levitanus/gits/ReaExtensions/tests/test2.py",
		"/home/levitanus/gits/reasession/reasession/connections/jack_backend.py",
		"/home/levitanus/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/tablet_tracker.py",
		"/home/levitanus/.config/REAPER/Data/Reaticulate.reabank",
		"/media/levitanus/Files/distrib/UVI Falcon/.txt",
		"/media/levitanus/Files/games/Kerbal Space Program Russian/gameinfo",
		"/home/levitanus/Загрузки/temp/benchmark/pabellon_barcelona/readme.txt",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/Синяя вечность/Синяя вечность.RPP",
		"/home/levitanus/Загрузки/temp/amdgpu-pro-16.40-348864/Packages",
		"/home/levitanus/Загрузки/temp/LinVst-4.7/LinVst-4.7-drag-drop/Readme",
		"/home/levitanus/.local/share/applications/Tablet xyz midi controller.desktop",
		"/home/levitanus/Загрузки/temp/LinVst-4.7/ReadMe",
		"/home/levitanus/Загрузки/temp/benchmark/classroom/ReadMe.txt",
		"/home/levitanus/Загрузки/temp/benchmark/fishy_cat/readme.txt",
		"/home/levitanus/Загрузки/LinVst-master/pluginterfaces/LICENSE.txt",
		"/home/levitanus/Загрузки/temp/amdgpu-pro-16.40-348864/Release",
		"/home/levitanus/gits/reasession/reasession/master.py",
		"/home/levitanus/gits/reasession/reasession/slaves.py",
		"/home/levitanus/gits/reasession/reasession/slave.py",
		"/home/levitanus/gits/reasession/setup.py",
		"/home/levitanus/gits/ReaExtensions/reaextensions.sublime-project",
		"/home/levitanus/Загрузки/temp/cgkit-2.0.0/README.txt",
		"/home/levitanus/Загрузки/temp/cgkit-2.0.0/supportlib/SConstruct",
		"/home/levitanus/.local/lib/python3.9/site-packages/cgkit1-1.2.7.dist-info/METADATA",
		"/home/levitanus/.local/lib/python3.9/site-packages/cgkit1-1.2.7.dist-info/RECORD",
		"/home/levitanus/.local/lib/python3.9/site-packages/cgkit1-1.2.7.dist-info/top_level.txt",
		"/home/levitanus/.local/lib/python3.9/site-packages/cgkitinfo.py",
		"/home/levitanus/.local/lib/python3.9/site-packages/cgkit1-1.2.7.dist-info/INSTALLER",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/musicexp.py",
		"/home/levitanus/gits/ReaExtensions/JSFX/KAWAI note-off generator",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/utilities.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilypond_dom.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilylib.py",
		"/usr/lib/python3.9/optparse.py",
		"/home/levitanus/gits/ReaExtensions/test_lilypond_dom.py",
		"/home/levitanus/gits/ReaExtensions/setup.py",
		"/home/levitanus/.cache/sublime-text-3/Package Storage/LSP-pyright/14.17.6/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/abc.pyi",
		"/home/levitanus/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/levitanus/.config/sublime-text-3/Packages/MagicPython/misc/scopes",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/test_python_syntax.py",
		"/media/levitanus/RAID/gits/ReaExtensions/rea_extensions/lilypond.py",
		"/home/levitanus/gits/reapy/reapy/core/fx/fx.pyi",
		"/home/levitanus/gits/reapy/reapy/core/fx/fx_param.pyi",
		"/home/levitanus/gits/reapy/setup.py",
		"/media/levitanus/RAID/gits/reapy/reapy_boost/config/resource_path.py",
		"/media/levitanus/RAID/gits/reapy/reapy_boost/tools/network/machines.py",
		"/media/levitanus/RAID/gits/reapy/reapy_boost/__init__.py",
		"/home/levitanus/.config/sublime-text-3/Packages/Python Improved/PythonImproved.tmLanguage",
		"/home/levitanus/.config/sublime-text-3/Packages/User/reabank.sublime-syntax",
		"/home/levitanus/.config/sublime-text-3/Packages/User/LevitanusPythonic.sublime-color-scheme",
		"/home/levitanus/gits/MusicStyleMap/Roboto_Mono/README.txt",
		"/home/levitanus/.config/sublime-text-3/Packages/ChromodynamicsSolarized.tmTheme",
		"/home/levitanus/Загрузки/temp/python_syntax.png",
		"/home/levitanus/Загрузки/temp/syntax.txt",
		"/home/levitanus/Загрузки/temp/--dpi.txt",
		"/home/levitanus/gits/ReaExtensions/test.py",
		"/home/levitanus/.local/lib/python3.9/site-packages/quickly/dom/lily.py",
		"/media/levitanus/Files/sambashare/Аня на конкурс/Женя Краснова.txt",
		"/home/levitanus/.ssh/github.pub",
		"/home/levitanus/.ssh/id_ed25519.pub"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"D:\\gits\\reapy\\reapy"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"_accidentals",
			"path",
			"wind",
			"show",
			"popu",
			"reaper",
			"end",
			"then",
			"open",
			"reaper.ImGui_",
			"reaper",
			"end",
			"function",
			"ImGui_",
			"local",
			"font",
			"barchek",
			"round",
			"chord",
			"(?!\\n)",
			"split",
			"chord",
			"fracture_to_length",
			"events",
			"any_",
			"input",
			"print",
			"ev.copy()",
			"copy(ev)",
			"container",
			"tie",
			"left",
			"tempo",
			" in quarter notes",
			"Length",
			"  # type:ignore",
			"  # type:ignore\n            time,",
			"float",
			"property",
			"return",
			"-> 'reapy.FX'",
			"if",
			"self",
			"seconds",
			"time",
			"voices[key]",
			"Position, Event",
			"@property\n    def fraction",
			"\n    # denominator: int\n",
			"#",
			"b",
			"#",
			"__str__",
			"other",
			"self.midi_pitch is None",
			"self.midi_pitch // 24",
			"None",
			"''",
			"pos1",
			")\n",
			"Fraction(",
			"'Fractured'",
			"pr.Fraction",
			"length",
			"'",
			":",
			"'=",
			"abjad",
			"tempo",
			"mod",
			"time",
			"fix",
			"cc",
			"g=",
			"cc:20",
			"C",
			"gliss",
			"glissando",
			"stacc",
			"0=",
			"sustain",
			"Brass",
			"=",
			"without clip",
			"full",
			"print ",
			"}",
			"{",
			"Domra",
			"domra",
			"identifier",
			"__call__",
			"predicate",
			"c",
			"Interval",
			"pitch):",
			"utilities",
			"interpret_alter_element",
			"e(\"",
			"=",
			"_loglevels",
			"prefix",
			"a",
			"{{",
			"more_string",
			"true",
			"reapy_boost",
			"reapy.",
			"config",
			"python",
			"parameter.function",
			"paramete",
			"keyword.operator.assignment",
			"example-c",
			"index",
			"meta.",
			"function-call",
			"argu",
			"variable",
			"opera",
			"red",
			"named",
			"reg",
			"argu",
			"generic",
			"function-call",
			"support",
			"function"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"♭",
			"utils",
			"reapy_boost.",
			"cyan",
			"magenta",
			"yellow",
			"red",
			"magenta",
			"orange",
			"base3",
			"base2",
			"var(base1)",
			"base2",
			"$1",
			"Length\\($1",
			"ValuesFilledType"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "rea_score/reascripts/ReaScore_render_selected_track.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 209,
						"regions":
						{
						},
						"selection":
						[
							[
								209,
								209
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_render_selected_track.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "rea_score/scale.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2835,
						"regions":
						{
						},
						"selection":
						[
							[
								244,
								244
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/levitanus/gits/ReaScore/rea_score/scale.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/inspector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3770,
						"regions":
						{
						},
						"selection":
						[
							[
								456,
								456
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///media/levitanus/RAID/gits/ReaScore/rea_score/inspector.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/dom.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6465,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							],
							[
								40,
								40
							],
							[
								102,
								102
							],
							[
								177,
								177
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///media/levitanus/RAID/gits/ReaScore/rea_score/dom.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/primitives.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13251,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///media/levitanus/RAID/gits/ReaScore/rea_score/primitives.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/levitanus/.local/lib/python3.9/site-packages/librosa/core/convert.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58978,
						"regions":
						{
						},
						"selection":
						[
							[
								17765,
								17765
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/levitanus/.local/lib/python3.9/site-packages/librosa/core/convert.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10335.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/levitanus/.local/lib/python3.9/site-packages/librosa/core/notation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17601,
						"regions":
						{
						},
						"selection":
						[
							[
								9713,
								9713
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/levitanus/.local/lib/python3.9/site-packages/librosa/core/notation.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9149.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/media/levitanus/RAID/gits/ReaScore/rea_score/lily_convert.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4545,
						"regions":
						{
						},
						"selection":
						[
							[
								129,
								129
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///media/levitanus/RAID/gits/ReaScore/rea_score/lily_convert.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 769.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 48.0
	},
	"input":
	{
		"height": 51.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 129.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 126.0
	},
	"output.anaconda_documentation":
	{
		"height": 240.0
	},
	"output.autopep8":
	{
		"height": 156.0
	},
	"output.diagnostics":
	{
		"height": 110.0
	},
	"output.exec":
	{
		"height": 206.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 110.0
	},
	"pinned_build_system": "Packages/User/python3_my.sublime-build",
	"project": "ReaScore.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 516.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/gits/sample_editor/sample_editor.sublime-project"
			]
		],
		"width": 392.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 281.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
