{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"stat",
				"staticmethod"
			],
			[
				"fun",
				"_functions"
			],
			[
				"pro",
				"property"
			],
			[
				"be",
				"beats_to_measures"
			],
			[
				"ppq",
				"ppq_to_beat"
			],
			[
				"p",
				"parent"
			],
			[
				"insi",
				"inside_reaper"
			],
			[
				"ye",
				"yield"
			],
			[
				"po",
				"position"
			],
			[
				"time",
				"time_to_ppq"
			],
			[
				"mea",
				"measure_info"
			],
			[
				"ve",
				"get_reaper_version"
			],
			[
				"over",
				"overload"
			],
			[
				"Union",
				"Union[int,"
			],
			[
				"List",
				"List"
			],
			[
				"FXP",
				"FXParamsList"
			],
			[
				"Enve",
				"Envelope'"
			],
			[
				"Suppo",
				"SupportsFloat"
			],
			[
				"Text",
				"TextSysexList"
			],
			[
				"Option",
				"Optional"
			],
			[
				"_p",
				"_project_inside"
			],
			[
				"Ite",
				"Iterable[int]"
			],
			[
				"MidiE",
				"MidiEventDict"
			],
			[
				"_is_a",
				"_is_active_inside"
			],
			[
				"_has",
				"_has_valid_id_inside()"
			],
			[
				"FX",
				"FXList':"
			],
			[
				"Audi",
				"AudioAccessor'"
			],
			[
				"_ha",
				"_has_valid_id_inside"
			],
			[
				"_ta",
				"_takes_inside"
			],
			[
				"Optiona",
				"Optional"
			],
			[
				"Regi",
				"RegionInfo:"
			],
			[
				"_st",
				"_start_inside()"
			],
			[
				"_ren",
				"_rendered_tracks_inside"
			],
			[
				"_start",
				"_start_inside"
			],
			[
				"length_i",
				"_length_inside"
			],
			[
				"TY",
				"TYPE_CHECKING"
			],
			[
				"TYPE",
				"TYPE_CHECKING"
			],
			[
				"open",
				"open_project"
			],
			[
				"lily",
				"lily_dict"
			],
			[
				"exi",
				"exist_ok="
			],
			[
				"export_",
				"export_path"
			],
			[
				"is",
				"is_absolute"
			],
			[
				"rela",
				"is_relative_to"
			],
			[
				"my_p",
				"my_path"
			],
			[
				"ex",
				"export_dir_absolute"
			],
			[
				"reso",
				"resolve"
			],
			[
				"ab",
				"absolute"
			],
			[
				"sym",
				"is_symlink"
			],
			[
				"Pro",
				"ProjectInspector()"
			],
			[
				"insp",
				"inspector"
			],
			[
				"relative",
				"relative_to"
			],
			[
				"re",
				"relative_to"
			],
			[
				"va",
				"value"
			],
			[
				"TextCo",
				"TextColored"
			],
			[
				"cur",
				"current"
			],
			[
				"export",
				"export_dir"
			],
			[
				"proj",
				"proj_insp"
			],
			[
				"InputT",
				"InputText"
			],
			[
				"ListCl",
				"ListClipper_GetDisplayRange"
			],
			[
				"ListClipperSte",
				"ListClipper_Step"
			],
			[
				"ListClipper",
				"ListClipper_Begin"
			],
			[
				"Creat",
				"CreateListClipper"
			],
			[
				"part",
				"part_name"
			],
			[
				"TrackIns",
				"TrackInspector"
			],
			[
				"score_",
				"score_tracks"
			],
			[
				"But",
				"Button"
			],
			[
				"par",
				"part_name"
			],
			[
				"TableNex",
				"TableNextRow"
			],
			[
				"init_",
				"init_width_or_weightInOptional="
			],
			[
				"TableS",
				"TableSetupColumn"
			],
			[
				"TableH",
				"TableHeadersRow"
			],
			[
				"BeginT",
				"BeginTable"
			],
			[
				"sco",
				"score_tracks"
			],
			[
				"Inpu",
				"InputText"
			],
			[
				"part_na",
				"part_name.setter"
			],
			[
				"pr_",
				"pr_guidss"
			],
			[
				"inside",
				"inside_reaper()"
			],
			[
				"Itera",
				"Iterator"
			],
			[
				"Gra",
				"GrandStaff"
			],
			[
				"staff",
				"staff_group"
			],
			[
				"StaffG",
				"StaffGroup."
			],
			[
				"MUL",
				"MULTILINE"
			],
			[
				"defi",
				"definition'"
			],
			[
				"_part",
				"_part_expression"
			],
			[
				"def",
				"definition'] for staff in"
			],
			[
				"octave",
				"octave_offset="
			],
			[
				"_staf",
				"_staff_expression"
			],
			[
				"expre",
				"expression="
			],
			[
				"_",
				"_staff_definition"
			],
			[
				"voice_di",
				"voice_dict"
			],
			[
				"sta",
				"staff_nr"
			],
			[
				"_voi",
				"_voice_expression"
			],
			[
				"alph",
				"alphabet"
			],
			[
				"C",
				"C', 4:'D', 5:'E', 6:'F', 7"
			],
			[
				"rendered_bod",
				"rendered_bodies"
			],
			[
				"rendere",
				"rendered_vars"
			],
			[
				"rendered_vars",
				"rendered_vars.append(var)"
			],
			[
				"render",
				"rendered_bodies"
			],
			[
				"voice_",
				"voice_body"
			],
			[
				"score",
				"score_guids"
			],
			[
				"from",
				"from_fraction"
			],
			[
				"note_",
				"note_events"
			],
			[
				"post",
				"postfix"
			],
			[
				"trem_",
				"trem_denom"
			],
			[
				"setne",
				"SetNextItemWidth"
			],
			[
				"End",
				"EndCombo(ctx)"
			],
			[
				"imgui",
				"ImGui"
			],
			[
				"acti",
				"actions_values"
			],
			[
				"BeginC",
				"BeginCombo(ctx"
			],
			[
				"trem",
				"trem_denom"
			],
			[
				"Notat",
				"NotationEvent"
			],
			[
				"midi",
				"midi_pitch"
			],
			[
				"octave_",
				"octave_offset"
			],
			[
				"ocat",
				"octave_offset"
			],
			[
				"Track",
				"TrackInspector"
			],
			[
				"isin",
				"isinstance(other, NotationIgnore):"
			],
			[
				"note",
				"note_events"
			],
			[
				"Sam",
				"SameLine"
			],
			[
				"und",
				"undo_block"
			],
			[
				"func",
				"funcmap"
			],
			[
				"per",
				"perform_func"
			],
			[
				"TreeN",
				"TreeNodeFlags_DefaultOpen"
			],
			[
				"sele",
				"selected_tracks[0]"
			],
			[
				"Bu",
				"Button"
			],
			[
				"Sa",
				"SameLine"
			],
			[
				"curs",
				"cursor_position"
			],
			[
				"key_",
				"key_signature"
			],
			[
				"key",
				"key_signature_at_start"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/levitanus/gits/reapy-boost/reapy_boost/__init__.py",
			"settings":
			{
				"buffer_size": 3031,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKsDAAAAAAAArAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwMAAAAAAACrAwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKwDAAAAAAAArQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAMAAAAAAACsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAA2QsAAAAAAADZCwAAaW1wb3J0IHN5cwoKCmRlZiBpc19pbnNpZGVfcmVhcGVyKCkgLT4gYm9vbDoKICAgICIiIgogICAgUmV0dXJuIHdoZXRoZXIgYGByZWFweV9ib29zdGBgIGlzIGltcG9ydGVkIGZyb20gaW5zaWRlIFJFQVBFUi4KCiAgICBJZiBgYHJlYXB5X2Jvb3N0YGAgaXMgcnVuIGZyb20gaW5zaWRlIGEgUkVBUEVSIGluc3RhbmNlIGJ1dCBjdXJyZW50bHkKICAgIGNvbnRyb2xzIGFub3RoZXIgUkVBUEVSIGluc3RhbmNlIG9uIGEgc2xhdmUgbWFjaGluZSAod2l0aAogICAgYGByZWFweV9ib29zdC5jb25uZWN0YGApLCByZXR1cm4gRmFsc2UuCiAgICAiIiIKICAgIGluc2lkZSA9IGhhc2F0dHIoc3lzLm1vZHVsZXNbIl9fbWFpbl9fIl0sICJvYmoiKQogICAgaWYgbm90IGluc2lkZToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gbWFjaGluZXMuZ2V0X3NlbGVjdGVkX21hY2hpbmVfaG9zdCgpIGlzIE5vbmUKICAgICAgICBleGNlcHQgTmFtZUVycm9yOgogICAgICAgICAgICAjIG1hY2hpbmVzIGlzIHVuZGVmaW5lZCBiZWNhdXNlIHdlIGFyZSBzdGlsbCBpbiB0aGUgaW5pdGlhbAogICAgICAgICAgICAjIGltcG9ydCBwcm9jZXNzLgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKCmZyb20gLnRvb2xzIGltcG9ydCAoCiAgICBjb25uZWN0LAogICAgY29ubmVjdF90b19kZWZhdWx0X21hY2hpbmUsCiAgICBkaXN0X2FwaV9pc19lbmFibGVkLAogICAgaW5zaWRlX3JlYXBlciwKICAgIHJlY29ubmVjdCwKICAgIGdlbmVyYXRlX2ltZ3VpLAopCmZyb20gLiBpbXBvcnQgcmVhc2NyaXB0X2FwaSwgZXJyb3JzLCBJbUd1aQpmcm9tIC5jb25maWcgaW1wb3J0IGNvbmZpZ3VyZV9yZWFwZXIKZnJvbSAuY29yZSBpbXBvcnQgKgpmcm9tIC5jb3JlLnJlYXBlciBpbXBvcnQgKgoKX192ZXJzaW9uX18gPSAiMC4xMC4xMDEiCl9fYWxsX18gPSBbCiAgICAicmVhc2NyaXB0X2FwaSIsCiAgICAiSlMiLAogICAgIkltR3VpIiwKICAgICJlcnJvcnMiLAogICAgIyBjb25maWcKICAgICJjb25maWd1cmVfcmVhcGVyIiwKICAgICMgY29yZS5yZWFweV9vYmplY3QKICAgICJSZWFweU9iamVjdCIsCiAgICAiUmVhcHlPYmplY3RMaXN0IiwKICAgICMgY29yZS5wcm9qZWN0CiAgICAiTWFya2VyIiwKICAgICJQcm9qZWN0IiwKICAgICJSZWdpb24iLAogICAgIlRpbWVTZWxlY3Rpb24iLAogICAgIk1hcmtlckluZm8iLAogICAgIlJlZ2lvbkluZm8iLAogICAgIyBjb3JlLmF1ZGlvX2FjY2Vzc29yCiAgICAiQXVkaW9BY2Nlc3NvciIsCiAgICAjIGNvcmUuZW52ZWxvcGUKICAgICJFbnZlbG9wZSIsCiAgICAiRW52ZWxvcGVMaXN0IiwKICAgICJFbnZlbG9wZVBvaW50IiwKICAgICMgY29yZS5meAogICAgIkZYIiwKICAgICJGWExpc3QiLAogICAgIkZYUGFyYW0iLAogICAgIkZYUGFyYW1zTGlzdCIsCiAgICAjIGNvcmUuaXRlbQogICAgIkl0ZW0iLAogICAgIk1JRElFdmVudCIsCiAgICAiTUlESUV2ZW50TGlzdCIsCiAgICAiQ0MiLAogICAgIkNDTGlzdCIsCiAgICAiTm90ZSIsCiAgICAiTm90ZUxpc3QiLAogICAgIlRleHRTeXNleCIsCiAgICAiVGV4dFN5c2V4SW5mbyIsCiAgICAiVGV4dFN5c2V4TGlzdCIsCiAgICAiQ0NTaGFwZUZsYWciLAogICAgIkNDU2hhcGUiLAogICAgIk1JRElFdmVudERpY3QiLAogICAgIk1JRElFdmVudEluZm8iLAogICAgIkNDSW5mbyIsCiAgICAnTm90ZUluZm8nLAogICAgIlNvdXJjZSIsCiAgICAiVGFrZSIsCiAgICAjIGNvcmUudHJhY2sKICAgICJBdXRvbWF0aW9uSXRlbSIsCiAgICAiU2VuZCIsCiAgICAiVHJhY2siLAogICAgIlRyYWNrTGlzdCIsCiAgICAjIGNvcmUud2luZG93CiAgICAiTUlESUVkaXRvciIsCiAgICAiVG9vbFRpcCIsCiAgICAiV2luZG93IiwKICAgICMgY29yZS5yZWFwZXIKICAgICdhZGRfcmVhc2NyaXB0JywKICAgICdhcm1fY29tbWFuZCcsCiAgICAnYnJvd3NlX2Zvcl9maWxlJywKICAgICdjbGVhcl9jb25zb2xlJywKICAgICdjbGVhcl9wZWFrX2NhY2hlJywKICAgICdkQl90b19zbGlkZXInLAogICAgJ2RlbGV0ZV9leHRfc3RhdGUnLAogICAgJ2Rpc2FybV9jb21tYW5kJywKICAgICdnZXRfYXJtZWRfY29tbWFuZCcsCiAgICAnZ2V0X2NvbW1hbmRfaWQnLAogICAgJ2dldF9jb21tYW5kX25hbWUnLAogICAgJ2dldF9leGVfZGlyJywKICAgICdnZXRfZXh0X3N0YXRlJywKICAgICdnZXRfZ2xvYmFsX2F1dG9tYXRpb25fbW9kZScsCiAgICAnZ2V0X2luaV9maWxlJywKICAgICdnZXRfbGFzdF90b3VjaGVkX3RyYWNrJywKICAgICdnZXRfbWFpbl93aW5kb3cnLAogICAgJ2dldF9wcm9qZWN0cycsCiAgICAnZ2V0X3JlYXBlcl92ZXJzaW9uJywKICAgICdnZXRfcmVzb3VyY2VfcGF0aCcsCiAgICAnZ2V0X3VzZXJfaW5wdXRzJywKICAgICdoYXNfZXh0X3N0YXRlJywKICAgICdpc192YWxpZF9pZCcsCiAgICAnb3Blbl9wcm9qZWN0JywKICAgICdwZXJmb3JtX2FjdGlvbicsCiAgICAncHJldmVudF91aV9yZWZyZXNoJywKICAgICdwcmludCcsCiAgICAncmVhcHJpbnQnLAogICAgJ3JlbW92ZV9yZWFzY3JpcHQnLAogICAgJ3JnYl9mcm9tX25hdGl2ZScsCiAgICAncmdiX3RvX25hdGl2ZScsCiAgICAnc2V0X2V4dF9zdGF0ZScsCiAgICAnc2V0X2dsb2JhbF9hdXRvbWF0aW9uX21vZGUnLAogICAgJ3Nob3dfY29uc29sZV9tZXNzYWdlJywKICAgICdzaG93X21lc3NhZ2VfYm94JywKICAgICdzbGlkZXJfdG9fZEInLAogICAgJ3Rlc3RfYXBpJywKICAgICd1bmRvX2Jsb2NrJywKICAgICd1cGRhdGVfYXJyYW5nZScsCiAgICAndXBkYXRlX3RpbWVsaW5lJywKICAgICd2aWV3X3ByZWZzJywKICAgICdhdWRpbycsCiAgICAnbWlkaScsCiAgICAndWknLAogICAgJ2RlZmVyJywKICAgICdhdF9leGl0JywKICAgICMgdG9vbHMKICAgICdjb25uZWN0JywKICAgICdjb25uZWN0X3RvX2RlZmF1bHRfbWFjaGluZScsCiAgICAnZGlzdF9hcGlfaXNfZW5hYmxlZCcsCiAgICAnaW5zaWRlX3JlYXBlcicsCiAgICAncmVjb25uZWN0JywKICAgICdnZW5lcmF0ZV9pbWd1aScsCl0K",
					"AQAAAAAAAAABAAAArQMAAAAAAACtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAKwDAAAAAAAArAMAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAArQMAAAAAAACtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAKwDAAAAAAAArQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAMAAAAAAACsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"yapf_document",
					null,
					"AQAAAAAAAAAAAAAA2QsAAAAAAADZCwAAaW1wb3J0IHN5cwoKCmRlZiBpc19pbnNpZGVfcmVhcGVyKCkgLT4gYm9vbDoKICAgICIiIgogICAgUmV0dXJuIHdoZXRoZXIgYGByZWFweV9ib29zdGBgIGlzIGltcG9ydGVkIGZyb20gaW5zaWRlIFJFQVBFUi4KCiAgICBJZiBgYHJlYXB5X2Jvb3N0YGAgaXMgcnVuIGZyb20gaW5zaWRlIGEgUkVBUEVSIGluc3RhbmNlIGJ1dCBjdXJyZW50bHkKICAgIGNvbnRyb2xzIGFub3RoZXIgUkVBUEVSIGluc3RhbmNlIG9uIGEgc2xhdmUgbWFjaGluZSAod2l0aAogICAgYGByZWFweV9ib29zdC5jb25uZWN0YGApLCByZXR1cm4gRmFsc2UuCiAgICAiIiIKICAgIGluc2lkZSA9IGhhc2F0dHIoc3lzLm1vZHVsZXNbIl9fbWFpbl9fIl0sICJvYmoiKQogICAgaWYgbm90IGluc2lkZToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gbWFjaGluZXMuZ2V0X3NlbGVjdGVkX21hY2hpbmVfaG9zdCgpIGlzIE5vbmUKICAgICAgICBleGNlcHQgTmFtZUVycm9yOgogICAgICAgICAgICAjIG1hY2hpbmVzIGlzIHVuZGVmaW5lZCBiZWNhdXNlIHdlIGFyZSBzdGlsbCBpbiB0aGUgaW5pdGlhbAogICAgICAgICAgICAjIGltcG9ydCBwcm9jZXNzLgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKCmZyb20gLnRvb2xzIGltcG9ydCAoCiAgICBjb25uZWN0LAogICAgY29ubmVjdF90b19kZWZhdWx0X21hY2hpbmUsCiAgICBkaXN0X2FwaV9pc19lbmFibGVkLAogICAgaW5zaWRlX3JlYXBlciwKICAgIHJlY29ubmVjdCwKICAgIGdlbmVyYXRlX2ltZ3VpLAopCmZyb20gLiBpbXBvcnQgcmVhc2NyaXB0X2FwaSwgZXJyb3JzLCBJbUd1aQpmcm9tIC5jb25maWcgaW1wb3J0IGNvbmZpZ3VyZV9yZWFwZXIKZnJvbSAuY29yZSBpbXBvcnQgKgpmcm9tIC5jb3JlLnJlYXBlciBpbXBvcnQgKgoKX192ZXJzaW9uX18gPSAiMC4xMC4xMDIiCl9fYWxsX18gPSBbCiAgICAicmVhc2NyaXB0X2FwaSIsCiAgICAiSlMiLAogICAgIkltR3VpIiwKICAgICJlcnJvcnMiLAogICAgIyBjb25maWcKICAgICJjb25maWd1cmVfcmVhcGVyIiwKICAgICMgY29yZS5yZWFweV9vYmplY3QKICAgICJSZWFweU9iamVjdCIsCiAgICAiUmVhcHlPYmplY3RMaXN0IiwKICAgICMgY29yZS5wcm9qZWN0CiAgICAiTWFya2VyIiwKICAgICJQcm9qZWN0IiwKICAgICJSZWdpb24iLAogICAgIlRpbWVTZWxlY3Rpb24iLAogICAgIk1hcmtlckluZm8iLAogICAgIlJlZ2lvbkluZm8iLAogICAgIyBjb3JlLmF1ZGlvX2FjY2Vzc29yCiAgICAiQXVkaW9BY2Nlc3NvciIsCiAgICAjIGNvcmUuZW52ZWxvcGUKICAgICJFbnZlbG9wZSIsCiAgICAiRW52ZWxvcGVMaXN0IiwKICAgICJFbnZlbG9wZVBvaW50IiwKICAgICMgY29yZS5meAogICAgIkZYIiwKICAgICJGWExpc3QiLAogICAgIkZYUGFyYW0iLAogICAgIkZYUGFyYW1zTGlzdCIsCiAgICAjIGNvcmUuaXRlbQogICAgIkl0ZW0iLAogICAgIk1JRElFdmVudCIsCiAgICAiTUlESUV2ZW50TGlzdCIsCiAgICAiQ0MiLAogICAgIkNDTGlzdCIsCiAgICAiTm90ZSIsCiAgICAiTm90ZUxpc3QiLAogICAgIlRleHRTeXNleCIsCiAgICAiVGV4dFN5c2V4SW5mbyIsCiAgICAiVGV4dFN5c2V4TGlzdCIsCiAgICAiQ0NTaGFwZUZsYWciLAogICAgIkNDU2hhcGUiLAogICAgIk1JRElFdmVudERpY3QiLAogICAgIk1JRElFdmVudEluZm8iLAogICAgIkNDSW5mbyIsCiAgICAnTm90ZUluZm8nLAogICAgIlNvdXJjZSIsCiAgICAiVGFrZSIsCiAgICAjIGNvcmUudHJhY2sKICAgICJBdXRvbWF0aW9uSXRlbSIsCiAgICAiU2VuZCIsCiAgICAiVHJhY2siLAogICAgIlRyYWNrTGlzdCIsCiAgICAjIGNvcmUud2luZG93CiAgICAiTUlESUVkaXRvciIsCiAgICAiVG9vbFRpcCIsCiAgICAiV2luZG93IiwKICAgICMgY29yZS5yZWFwZXIKICAgICdhZGRfcmVhc2NyaXB0JywKICAgICdhcm1fY29tbWFuZCcsCiAgICAnYnJvd3NlX2Zvcl9maWxlJywKICAgICdjbGVhcl9jb25zb2xlJywKICAgICdjbGVhcl9wZWFrX2NhY2hlJywKICAgICdkQl90b19zbGlkZXInLAogICAgJ2RlbGV0ZV9leHRfc3RhdGUnLAogICAgJ2Rpc2FybV9jb21tYW5kJywKICAgICdnZXRfYXJtZWRfY29tbWFuZCcsCiAgICAnZ2V0X2NvbW1hbmRfaWQnLAogICAgJ2dldF9jb21tYW5kX25hbWUnLAogICAgJ2dldF9leGVfZGlyJywKICAgICdnZXRfZXh0X3N0YXRlJywKICAgICdnZXRfZ2xvYmFsX2F1dG9tYXRpb25fbW9kZScsCiAgICAnZ2V0X2luaV9maWxlJywKICAgICdnZXRfbGFzdF90b3VjaGVkX3RyYWNrJywKICAgICdnZXRfbWFpbl93aW5kb3cnLAogICAgJ2dldF9wcm9qZWN0cycsCiAgICAnZ2V0X3JlYXBlcl92ZXJzaW9uJywKICAgICdnZXRfcmVzb3VyY2VfcGF0aCcsCiAgICAnZ2V0X3VzZXJfaW5wdXRzJywKICAgICdoYXNfZXh0X3N0YXRlJywKICAgICdpc192YWxpZF9pZCcsCiAgICAnb3Blbl9wcm9qZWN0JywKICAgICdwZXJmb3JtX2FjdGlvbicsCiAgICAncHJldmVudF91aV9yZWZyZXNoJywKICAgICdwcmludCcsCiAgICAncmVhcHJpbnQnLAogICAgJ3JlbW92ZV9yZWFzY3JpcHQnLAogICAgJ3JnYl9mcm9tX25hdGl2ZScsCiAgICAncmdiX3RvX25hdGl2ZScsCiAgICAnc2V0X2V4dF9zdGF0ZScsCiAgICAnc2V0X2dsb2JhbF9hdXRvbWF0aW9uX21vZGUnLAogICAgJ3Nob3dfY29uc29sZV9tZXNzYWdlJywKICAgICdzaG93X21lc3NhZ2VfYm94JywKICAgICdzbGlkZXJfdG9fZEInLAogICAgJ3Rlc3RfYXBpJywKICAgICd1bmRvX2Jsb2NrJywKICAgICd1cGRhdGVfYXJyYW5nZScsCiAgICAndXBkYXRlX3RpbWVsaW5lJywKICAgICd2aWV3X3ByZWZzJywKICAgICdhdWRpbycsCiAgICAnbWlkaScsCiAgICAndWknLAogICAgJ2RlZmVyJywKICAgICdhdF9leGl0JywKICAgICMgdG9vbHMKICAgICdjb25uZWN0JywKICAgICdjb25uZWN0X3RvX2RlZmF1bHRfbWFjaGluZScsCiAgICAnZGlzdF9hcGlfaXNfZW5hYmxlZCcsCiAgICAnaW5zaWRlX3JlYXBlcicsCiAgICAncmVjb25uZWN0JywKICAgICdnZW5lcmF0ZV9pbWd1aScsCl0K",
					"AQAAAAAAAAABAAAArQMAAAAAAACtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZCwAAaW1wb3J0IHN5cwoKCmRlZiBpc19pbnNpZGVfcmVhcGVyKCkgLT4gYm9vbDoKICAgICIiIgogICAgUmV0dXJuIHdoZXRoZXIgYGByZWFweV9ib29zdGBgIGlzIGltcG9ydGVkIGZyb20gaW5zaWRlIFJFQVBFUi4KCiAgICBJZiBgYHJlYXB5X2Jvb3N0YGAgaXMgcnVuIGZyb20gaW5zaWRlIGEgUkVBUEVSIGluc3RhbmNlIGJ1dCBjdXJyZW50bHkKICAgIGNvbnRyb2xzIGFub3RoZXIgUkVBUEVSIGluc3RhbmNlIG9uIGEgc2xhdmUgbWFjaGluZSAod2l0aAogICAgYGByZWFweV9ib29zdC5jb25uZWN0YGApLCByZXR1cm4gRmFsc2UuCiAgICAiIiIKICAgIGluc2lkZSA9IGhhc2F0dHIoc3lzLm1vZHVsZXNbIl9fbWFpbl9fIl0sICJvYmoiKQogICAgaWYgbm90IGluc2lkZToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gbWFjaGluZXMuZ2V0X3NlbGVjdGVkX21hY2hpbmVfaG9zdCgpIGlzIE5vbmUKICAgICAgICBleGNlcHQgTmFtZUVycm9yOgogICAgICAgICAgICAjIG1hY2hpbmVzIGlzIHVuZGVmaW5lZCBiZWNhdXNlIHdlIGFyZSBzdGlsbCBpbiB0aGUgaW5pdGlhbAogICAgICAgICAgICAjIGltcG9ydCBwcm9jZXNzLgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKCmZyb20gLnRvb2xzIGltcG9ydCAoCiAgICBjb25uZWN0LAogICAgY29ubmVjdF90b19kZWZhdWx0X21hY2hpbmUsCiAgICBkaXN0X2FwaV9pc19lbmFibGVkLAogICAgaW5zaWRlX3JlYXBlciwKICAgIHJlY29ubmVjdCwKICAgIGdlbmVyYXRlX2ltZ3VpLAopCmZyb20gLiBpbXBvcnQgcmVhc2NyaXB0X2FwaSwgZXJyb3JzLCBJbUd1aQpmcm9tIC5jb25maWcgaW1wb3J0IGNvbmZpZ3VyZV9yZWFwZXIKZnJvbSAuY29yZSBpbXBvcnQgKgpmcm9tIC5jb3JlLnJlYXBlciBpbXBvcnQgKgoKX192ZXJzaW9uX18gPSAiMC4xMC4xMDIiCl9fYWxsX18gPSBbCiAgICAicmVhc2NyaXB0X2FwaSIsCiAgICAiSlMiLAogICAgIkltR3VpIiwKICAgICJlcnJvcnMiLAogICAgIyBjb25maWcKICAgICJjb25maWd1cmVfcmVhcGVyIiwKICAgICMgY29yZS5yZWFweV9vYmplY3QKICAgICJSZWFweU9iamVjdCIsCiAgICAiUmVhcHlPYmplY3RMaXN0IiwKICAgICMgY29yZS5wcm9qZWN0CiAgICAiTWFya2VyIiwKICAgICJQcm9qZWN0IiwKICAgICJSZWdpb24iLAogICAgIlRpbWVTZWxlY3Rpb24iLAogICAgIk1hcmtlckluZm8iLAogICAgIlJlZ2lvbkluZm8iLAogICAgIyBjb3JlLmF1ZGlvX2FjY2Vzc29yCiAgICAiQXVkaW9BY2Nlc3NvciIsCiAgICAjIGNvcmUuZW52ZWxvcGUKICAgICJFbnZlbG9wZSIsCiAgICAiRW52ZWxvcGVMaXN0IiwKICAgICJFbnZlbG9wZVBvaW50IiwKICAgICMgY29yZS5meAogICAgIkZYIiwKICAgICJGWExpc3QiLAogICAgIkZYUGFyYW0iLAogICAgIkZYUGFyYW1zTGlzdCIsCiAgICAjIGNvcmUuaXRlbQogICAgIkl0ZW0iLAogICAgIk1JRElFdmVudCIsCiAgICAiTUlESUV2ZW50TGlzdCIsCiAgICAiQ0MiLAogICAgIkNDTGlzdCIsCiAgICAiTm90ZSIsCiAgICAiTm90ZUxpc3QiLAogICAgIlRleHRTeXNleCIsCiAgICAiVGV4dFN5c2V4SW5mbyIsCiAgICAiVGV4dFN5c2V4TGlzdCIsCiAgICAiQ0NTaGFwZUZsYWciLAogICAgIkNDU2hhcGUiLAogICAgIk1JRElFdmVudERpY3QiLAogICAgIk1JRElFdmVudEluZm8iLAogICAgIkNDSW5mbyIsCiAgICAnTm90ZUluZm8nLAogICAgIlNvdXJjZSIsCiAgICAiVGFrZSIsCiAgICAjIGNvcmUudHJhY2sKICAgICJBdXRvbWF0aW9uSXRlbSIsCiAgICAiU2VuZCIsCiAgICAiVHJhY2siLAogICAgIlRyYWNrTGlzdCIsCiAgICAjIGNvcmUud2luZG93CiAgICAiTUlESUVkaXRvciIsCiAgICAiVG9vbFRpcCIsCiAgICAiV2luZG93IiwKICAgICMgY29yZS5yZWFwZXIKICAgICdhZGRfcmVhc2NyaXB0JywKICAgICdhcm1fY29tbWFuZCcsCiAgICAnYnJvd3NlX2Zvcl9maWxlJywKICAgICdjbGVhcl9jb25zb2xlJywKICAgICdjbGVhcl9wZWFrX2NhY2hlJywKICAgICdkQl90b19zbGlkZXInLAogICAgJ2RlbGV0ZV9leHRfc3RhdGUnLAogICAgJ2Rpc2FybV9jb21tYW5kJywKICAgICdnZXRfYXJtZWRfY29tbWFuZCcsCiAgICAnZ2V0X2NvbW1hbmRfaWQnLAogICAgJ2dldF9jb21tYW5kX25hbWUnLAogICAgJ2dldF9leGVfZGlyJywKICAgICdnZXRfZXh0X3N0YXRlJywKICAgICdnZXRfZ2xvYmFsX2F1dG9tYXRpb25fbW9kZScsCiAgICAnZ2V0X2luaV9maWxlJywKICAgICdnZXRfbGFzdF90b3VjaGVkX3RyYWNrJywKICAgICdnZXRfbWFpbl93aW5kb3cnLAogICAgJ2dldF9wcm9qZWN0cycsCiAgICAnZ2V0X3JlYXBlcl92ZXJzaW9uJywKICAgICdnZXRfcmVzb3VyY2VfcGF0aCcsCiAgICAnZ2V0X3VzZXJfaW5wdXRzJywKICAgICdoYXNfZXh0X3N0YXRlJywKICAgICdpc192YWxpZF9pZCcsCiAgICAnb3Blbl9wcm9qZWN0JywKICAgICdwZXJmb3JtX2FjdGlvbicsCiAgICAncHJldmVudF91aV9yZWZyZXNoJywKICAgICdwcmludCcsCiAgICAncmVhcHJpbnQnLAogICAgJ3JlbW92ZV9yZWFzY3JpcHQnLAogICAgJ3JnYl9mcm9tX25hdGl2ZScsCiAgICAncmdiX3RvX25hdGl2ZScsCiAgICAnc2V0X2V4dF9zdGF0ZScsCiAgICAnc2V0X2dsb2JhbF9hdXRvbWF0aW9uX21vZGUnLAogICAgJ3Nob3dfY29uc29sZV9tZXNzYWdlJywKICAgICdzaG93X21lc3NhZ2VfYm94JywKICAgICdzbGlkZXJfdG9fZEInLAogICAgJ3Rlc3RfYXBpJywKICAgICd1bmRvX2Jsb2NrJywKICAgICd1cGRhdGVfYXJyYW5nZScsCiAgICAndXBkYXRlX3RpbWVsaW5lJywKICAgICd2aWV3X3ByZWZzJywKICAgICdhdWRpbycsCiAgICAnbWlkaScsCiAgICAndWknLAogICAgJ2RlZmVyJywKICAgICdhdF9leGl0JywKICAgICMgdG9vbHMKICAgICdjb25uZWN0JywKICAgICdjb25uZWN0X3RvX2RlZmF1bHRfbWFjaGluZScsCiAgICAnZGlzdF9hcGlfaXNfZW5hYmxlZCcsCiAgICAnaW5zaWRlX3JlYXBlcicsCiAgICAncmVjb25uZWN0JywKICAgICdnZW5lcmF0ZV9pbWd1aScsCl0KAAAAAAAAAADXCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQMAAAAAAACtAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx.py",
			"settings":
			{
				"buffer_size": 12614,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "[${0:$SELECTION}]"
					},
					"AgAAAO4BAAAAAAAA7gEAAAAAAAAdAAAARGljdFtzdHIsIENhbGxhYmxlWy4uLiwgQW55XV3uAQAAAAAAAA0CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gEAAAAAAAALAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BAAAAO4BAAAAAAAA7wEAAAAAAAAAAAAA7wEAAAAAAADwAQAAAAAAAAAAAADwAQAAAAAAAPEBAAAAAAAAAAAAAPEBAAAAAAAA8gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gEAAAAAAADuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"LSP-pyright\",\"item\":{\"label\":\"List\",\"kind\":6,\"data\":{\"symbolLabel\":\"List\",\"position\":{\"line\":17,\"character\":36},\"workspacePath\":\"/home/levitanus/gits/reapy-boost\",\"filePath\":\"/home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx.py\"},\"sortText\":\"09.9999.List\"}}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "List"
					},
					"AgAAAO4BAAAAAAAA7gEAAAAAAAAEAAAATGlzdO4BAAAAAAAA8gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "Dic"
					},
					"BAAAAO4BAAAAAAAA7wEAAAAAAAAAAAAA7wEAAAAAAADvAQAAAAAAAAQAAABMaXN07wEAAAAAAADwAQAAAAAAAAAAAADwAQAAAAAAAPEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPEBAAAAAAAA8gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QEAAAAAAADxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "str,"
					},
					"BAAAAPMBAAAAAAAA9AEAAAAAAAAAAAAA9AEAAAAAAAD1AQAAAAAAAAAAAAD1AQAAAAAAAPYBAAAAAAAAAAAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"paste",
					null,
					"AgAAAJoBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADCAQAAAAAAAB0AAABEaWN0W3N0ciwgQ2FsbGFibGVbLi4uLCBBbnldXQ",
					"AQAAAAAAAAABAAAAmgEAAAAAAAC3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAwgEAAAAAAADCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOgEAAAAAAAA6QQAAAAAAAAAAAAA6QQAAAAAAADxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AQAAAAAAADoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"paste",
					null,
					"AQAAAPEEAAAAAAAAVwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QQAAAAAAADxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFcFAAAAAAAAWAUAAAAAAAAAAAAAWAUAAAAAAABkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAAGAFAAAAAAAAYAUAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAAGAFAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABiBQAAAAAAAAAAAABiBQAAAAAAAGMFAAAAAAAAAAAAAGMFAAAAAAAAZAUAAAAAAAAAAAAAZAUAAAAAAABlBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAUAAAAAAABgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "funcitons"
					},
					"CQAAAGUFAAAAAAAAZgUAAAAAAAAAAAAAZgUAAAAAAABnBQAAAAAAAAAAAABnBQAAAAAAAGgFAAAAAAAAAAAAAGgFAAAAAAAAaQUAAAAAAAAAAAAAaQUAAAAAAABqBQAAAAAAAAAAAABqBQAAAAAAAGsFAAAAAAAAAAAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAbAUAAAAAAABtBQAAAAAAAAAAAABtBQAAAAAAAG4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQUAAAAAAABlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAG4FAAAAAAAAbwUAAAAAAAAAAAAAbwUAAAAAAABwBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgUAAAAAAABuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAFAAAAAAAAcQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAUAAAAAAABwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "self._get_"
					},
					"CgAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAABzBQAAAAAAAAAAAABzBQAAAAAAAHQFAAAAAAAAAAAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB2BQAAAAAAAAAAAAB2BQAAAAAAAHcFAAAAAAAAAAAAAHcFAAAAAAAAeAUAAAAAAAAAAAAAeAUAAAAAAAB5BQAAAAAAAAAAAAB5BQAAAAAAAHoFAAAAAAAAAAAAAHoFAAAAAAAAewUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQUAAAAAAABxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "funcitons"
					},
					"CQAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB9BQAAAAAAAAAAAAB9BQAAAAAAAH4FAAAAAAAAAAAAAH4FAAAAAAAAfwUAAAAAAAAAAAAAfwUAAAAAAACABQAAAAAAAAAAAACABQAAAAAAAIEFAAAAAAAAAAAAAIEFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACDBQAAAAAAAAAAAACDBQAAAAAAAIQFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewUAAAAAAAB7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIQFAAAAAAAAhgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAP///////+9/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "_get_functions"
					},
					"DwAAAJ4FAAAAAAAAnwUAAAAAAAAAAAAAnwUAAAAAAACfBQAAAAAAAAkAAABmdW5jdGlvbnOfBQAAAAAAAKAFAAAAAAAAAAAAAKAFAAAAAAAAoQUAAAAAAAAAAAAAoQUAAAAAAACiBQAAAAAAAAAAAACiBQAAAAAAAKMFAAAAAAAAAAAAAKMFAAAAAAAApAUAAAAAAAAAAAAApAUAAAAAAAClBQAAAAAAAAAAAAClBQAAAAAAAKYFAAAAAAAAAAAAAKYFAAAAAAAApwUAAAAAAAAAAAAApwUAAAAAAACoBQAAAAAAAAAAAACoBQAAAAAAAKkFAAAAAAAAAAAAAKkFAAAAAAAAqgUAAAAAAAAAAAAAqgUAAAAAAACrBQAAAAAAAAAAAACrBQAAAAAAAKwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngUAAAAAAACnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					2,
					"left_delete",
					null,
					"AgAAAOkEAAAAAAAA6QQAAAAAAABuAAAAICAgICAgICBjbHMgPSBzZWxmLl9fY2xhc3NfXwogICAgICAgIGlmIG5vdCBjbHMuX2Z1bmN0aW9uczoKICAgICAgICAgICAgY2xzLl9mdW5jdGlvbnMgPSBzZWxmLl9nZXRfZnVuY3Rpb25zKCnoBAAAAAAAAOgEAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAVwUAAAAAAADpBAAAAAAAAAAAAAAAAAAA"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "_cls"
					},
					"BAAAAOUBAAAAAAAA5gEAAAAAAAAAAAAA5gEAAAAAAADnAQAAAAAAAAAAAADnAQAAAAAAAOgBAAAAAAAAAAAAAOgBAAAAAAAA6QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QEAAAAAAADlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "cls"
					},
					"BAAAAPQBAAAAAAAA9QEAAAAAAAAAAAAA9QEAAAAAAAD1AQAAAAAAAAQAAABzZWxm9QEAAAAAAAD2AQAAAAAAAAAAAAD2AQAAAAAAAPcBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AEAAAAAAAD0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BQAAAPQBAAAAAAAA9QEAAAAAAAAAAAAA9QEAAAAAAAD1AQAAAAAAAAMAAABjbHP1AQAAAAAAAPYBAAAAAAAAAAAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA9wEAAAAAAAD4AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"left_delete",
					null,
					"AQAAAPQBAAAAAAAA9AEAAAAAAAAEAAAAc2VsZg",
					"AQAAAAAAAAABAAAA+AEAAAAAAAD0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AQAAAM0BAAAAAAAAzQEAAAAAAAALAAAAIyBAcHJvcGVydHk",
					"AQAAAAAAAAABAAAA2AEAAAAAAADNAQAAAAAAAAAAAAAAAEBA"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "@stat"
					},
					"BQAAAM0BAAAAAAAAzgEAAAAAAAAAAAAAzgEAAAAAAADPAQAAAAAAAAAAAADPAQAAAAAAANABAAAAAAAAAAAAANABAAAAAAAA0QEAAAAAAAAAAAAA0QEAAAAAAADSAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQEAAAAAAADNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert_completion",
					{
						"completion": "staticmethod$0",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "staticmethod"
					},
					"AgAAAM4BAAAAAAAAzgEAAAAAAAAEAAAAc3RhdM4BAAAAAAAA2gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gEAAAAAAADSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"paste",
					null,
					"AgAAAMYFAAAAAAAA2AUAAAAAAAAAAAAA2AUAAAAAAADYBQAAAAAAAA4AAABfZ2V0X2Z1bmN0aW9ucw",
					"AQAAAAAAAAABAAAAxgUAAAAAAADUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					2,
					"left_delete",
					null,
					"AgAAABsFAAAAAAAAGwUAAAAAAAANAAAAICAgIEBwcm9wZXJ0eRoFAAAAAAAAGgUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"paste",
					null,
					"AgAAAAkFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAXBQAAAAAAAA4AAABfZ2V0X2Z1bmNpdG9ucw",
					"AQAAAAAAAAABAAAACQUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAFwUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"paste",
					null,
					"AgAAAPgEAAAAAAAAAQUAAAAAAAAAAAAAAQUAAAAAAAABBQAAAAAAAAkAAABmdW5jaXRvbnM",
					"AQAAAAAAAAABAAAA+AQAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"yapf_document",
					null,
					"",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAzwQAAAAAAADPBAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/MagicPython/settings/sublime/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/python3_my.sublime-build",
					""
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/python3_my.sublime-build",
					""
				]
			],
			[
				"Packages/MagicPython/settings/sublime/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"dif",
				"FileDiffs: Menu"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"",
				"Anaconda: Goto object assignment"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"isor",
				"isort: sort imports"
			],
			[
				"prewi",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mar",
				"Markdown Preview: Preview in Browser"
			],
			[
				"previw",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"jed",
				"SublimeJedi: Show Signature"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"exit()",
			"isort_sort_imports",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/levitanus/gits/reapy-boost",
		"/home/levitanus/gits/reapy-boost/reapy_boost",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/fx"
	],
	"file_history":
	[
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx.py",
		"/home/levitanus/gits/reapy-boost/CHANGELOG.md",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/project/project.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/item/midi_event.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/config/resource_path.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/__init__.py",
		"/home/levitanus/gits/reapy-boost/README.md",
		"/home/levitanus/.pypirc",
		"/home/levitanus/gits/python_test.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/config/shared_library.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/config/config.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx_param.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/core/project/region.py",
		"/home/levitanus/gits/reapy-boost/setup.py",
		"/home/levitanus/gits/reapy-boost/reapy_boost/ImGui.py",
		"/home/levitanus/gits/reapy-boost/update_docs.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/web_interface.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/web_interface.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/server.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/server.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/machines.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/machines.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/client.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/tools/network/client.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/json.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/extension_dependency.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/_inside_reaper.py",
		"/home/levitanus/gits/reapy-boost/reapy/tools/__init__.py",
		"/home/levitanus/gits/reapy-boost/reapy/reascripts/enable_dist_api.py",
		"/home/levitanus/gits/reapy-boost/reapy/reascripts/disable_dist_api.py",
		"/home/levitanus/gits/reapy-boost/reapy/reascripts/activate_reapy_server.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/window/window.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/window/tooltip.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/window/midi_editor.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/track/track.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/track/send.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/track/automation_item.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/ui.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/reaper.py",
		"/home/levitanus/gits/reapy-boost/reapy/__init__.py",
		"/home/levitanus/gits/reapy-boost/reapy/__main__.py",
		"/home/levitanus/gits/reapy-boost/reapy/additional_api.py",
		"/home/levitanus/gits/reapy-boost/reapy/errors.py",
		"/home/levitanus/gits/reapy-boost/reapy/ImGui.py",
		"/home/levitanus/gits/reapy-boost/reapy/reascript_api.py",
		"/home/levitanus/gits/reapy-boost/reapy/config/config.py",
		"/home/levitanus/gits/reapy-boost/reapy/config/resource_path.py",
		"/home/levitanus/gits/reapy-boost/reapy/config/shared_library.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/_JS_generator.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/audio_accessor.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/envelope.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/JS_API.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/map.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reapy_object.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/fx.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/fx_param.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/item.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/midi_event.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/source.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/take.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/project/marker.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/project/project.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/project/region.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/project/time_selection.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/audio.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/defer.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/midi.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/__init__.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/fx.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/__init__.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/__init__.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/fx/fx_param.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/take.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/None",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/item.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/item/__init__.py",
		"/home/levitanus/gits/reapy-boost/reapy/core/project/time_selection.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/core/reaper/defer.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/reascripts/activate_reapy_server.pyi",
		"/home/levitanus/gits/reapy-boost/reapy/tools/__init__.pyi",
		"/media/levitanus/Files/gits/python_test.py",
		"/home/levitanus/.config/REAPER/ProjectTemplates/simple voice mixing 2.RPP",
		"/media/levitanus/Files/gits/ReaScore/rea_score/inspector.py",
		"/home/levitanus/.config/REAPER/Scripts/ReaTeam Extensions/API/ReaImGui_Demo.lua",
		"/media/levitanus/Files/gits/ReaScore/rea_score/keymap.py",
		"/media/levitanus/Files/gits/ReaScore/rea_score/reascripts/ReaScore_simple_test2.py",
		"/media/levitanus/Files/gits/ReaScore/rea_score/reascripts/ReaScore_render_selected_track.py",
		"/media/levitanus/Files/gits/ReaScore/tests/test_inspector.py",
		"/media/levitanus/Files/gits/ReaScore/rea_score/reascripts/ReaScore_GUI.py",
		"/media/levitanus/Files/gits/ReaScore/rea_score/lily_export.py",
		"/media/levitanus/RAID/gits/ReaScore/rea_score/primitives.py",
		"/media/levitanus/RAID/gits/ReaScore/rea_score/dom.py",
		"/media/levitanus/RAID/gits/ReaScore/rea_score/lily_convert.py",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/Bongos.ly",
		"/media/levitanus/RAID/gits/reapy/reapy/core/project/project.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/track/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/track/track.py",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/Drums.ly",
		"/home/levitanus/gits/ReaScore/tests/simple_test.py",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/perc 1.ly",
		"/media/levitanus/RAID/gits/reapy/reapy/core/item/take.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/item/__init__.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/item/midi_event.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/reaper/reaper.py",
		"/home/levitanus/gits/ReaScore/rea_score/dom.py",
		"/media/levitanus/RAID/gits/ReaScore/rea_score/scale.py",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/Grand.ly",
		"/media/levitanus/RaidNew/fonogr/концерт Тихон/верни мне музыку/Timpani.ly",
		"/home/levitanus/gits/ReaScore/rea_score/lily_export.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_render_selected_track.py",
		"/media/levitanus/RAID/gits/reapy/reapy/ImGui.py",
		"/media/levitanus/RAID/gits/reapy/reapy/__init__.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_set_selected_notes_as_ghost.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_combine_selected_items_to_the_selected_track.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_shortcut.py",
		"/home/levitanus/gits/ReaScore/tests/test_primitives.py",
		"/media/levitanus/RAID/gits/reapy/reapy/core/project/__init__.py",
		"/home/levitanus/gits/ReaScore/tests/test_dom.py",
		"/home/levitanus/gits/ReaScore/tests/test_scale.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/music_dom.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lilypond_old.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/utils.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/lily_export.py",
		"/home/levitanus/gits/ReaExtensions/rea_extensions/music_fractures.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_change_clef_of_the_frist_selected_note_to_tenor.py",
		"/home/levitanus/gits/ReaScore/rea_score/reascripts/ReaScore_change_clef_of_the_fris_selected_note_to_bass.py",
		"/home/levitanus/gits/reapy/reapy/core/item/midi_event.py"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 136.0,
		"where_history":
		[
			"/home/levitanus/gits/reapy-boost/reapy_boost,<project filters>",
			"/home/levitanus/gits/reapy-boost/reapy,<project filters>",
			"D:\\gits\\reapy\\reapy"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"type",
			"inside_reaper",
			"float",
			"beat",
			"measure",
			"reapy",
			"PORT",
			"ty.",
			"reapy_boost.Track",
			"ty.",
			"reapy",
			"\\breapy\\b",
			"\\breapy\\.?",
			"ty.",
			"min",
			"ty.",
			"print",
			"idx - 1",
			"s[idx -",
			"pr_guidss",
			"drag",
			"idx",
			"guid",
			"score_track",
			"score_tracks",
			"score_",
			"print",
			"get_global_events",
			"NotationPitch",
			"trem_denom",
			"NotationTrem",
			"add_trill_to_selected_notes",
			"NotationTrill",
			"support_tie",
			"pt",
			"notations",
			"preambula",
			"events",
			"NotationTrill",
			"NotationIgnore",
			"NotationGhost",
			"@rpr.undo_block()",
			"set_voice_for_selected_notes",
			"Hello, world!",
			"MontserratHello, world!",
			"Basic",
			"flags",
			"dock_state",
			"dock",
			"Check",
			"dock_state",
			"TrackPitchType",
			"pitch_type",
			"NotationClef",
			"buf",
			"T",
			"EventDictU",
			"EventsDictT",
			"EventsDict[T]",
			"T",
			"time",
			"major",
			"pos",
			"item.position",
			"out.append(",
			"render_eny_event",
			"length",
			"preambula",
			"length",
			"LIMIT_DENOMINATOR",
			"power_of_two",
			"finalized",
			"Begin",
			"tuplet",
			"pitches",
			"voice",
			"accidental",
			"rate",
			"clef",
			"NotationClef",
			"prefix",
			"preambula",
			"staff",
			"staff_nr",
			"staff",
			"NotationStaff",
			"staffs",
			"staff",
			"staffs",
			"Voice",
			"voices",
			"chan",
			"voice",
			"staticmethod",
			"notations",
			"]:\n",
			"is",
			"alid",
			"alida",
			"split_at_barline",
			"pr.Accidental",
			"pr",
			"return",
			"accidental",
			"Accidental",
			"is'",
			"is",
			"es",
			"1",
			"_accidentals",
			"path",
			"wind",
			"show",
			"popu",
			"reaper",
			"end",
			"then",
			"open",
			"reaper.ImGui_",
			"reaper",
			"end",
			"function",
			"ImGui_",
			"local",
			"font",
			"barchek",
			"round",
			"chord"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"reapy_boost",
			"♭",
			"utils",
			"reapy_boost.",
			"cyan",
			"magenta",
			"yellow",
			"red",
			"magenta",
			"orange",
			"base3",
			"base2",
			"var(base1)",
			"base2",
			"$1",
			"Length\\($1",
			"ValuesFilledType"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/levitanus/gits/reapy-boost/reapy_boost/__init__.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3031,
						"regions":
						{
						},
						"selection":
						[
							[
								941,
								941
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/levitanus/gits/reapy-boost/reapy_boost/__init__.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 144.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "/home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12614,
						"regions":
						{
						},
						"selection":
						[
							[
								1231,
								1231
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/levitanus/gits/reapy-boost/reapy_boost/core/fx/fx.py",
							"show_definitions": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 51.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 129.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 126.0
	},
	"output.anaconda_documentation":
	{
		"height": 240.0
	},
	"output.autopep8":
	{
		"height": 156.0
	},
	"output.diagnostics":
	{
		"height": 110.0
	},
	"output.exec":
	{
		"height": 206.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 110.0
	},
	"pinned_build_system": "Packages/User/python3_my.sublime-build",
	"project": "reapy.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 516.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/media/levitanus/Files/gits/ReaScore/ReaScore.sublime-project"
			]
		],
		"width": 392.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 286.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
